
-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200422
-- Description: Sync back data from SISWEB_OWNER to SHADOW LNKCONSISTLIST
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKCONSISTLIST_Refresh_SHADOW_Table (@DEBUG      BIT = 'FALSE') 
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY

		DECLARE @MERGED_ROWS BIGINT           = 0
			   ,@PROCNAME    VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID   UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE  VARCHAR(MAX);

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE              NVARCHAR(10)
									 ,IESYSTEMCONTROLNUMBER   VARCHAR(12) NOT NULL
									 ,PARTSEQUENCENUMBER      SMALLINT NOT NULL
									 ,REFERENCENO             VARCHAR(50) NULL
									 ,GRAPHNO                 VARCHAR(50) NULL
									 ,PARTNUMBER              VARCHAR(40) NOT NULL
									 ,ORGCODE                 VARCHAR(12) NOT NULL
									 ,PARTNAME                NVARCHAR(64) NULL
									 ,PARTMODIFIER            NVARCHAR(512) NULL
									 ,QUANTITY                VARCHAR(24) NULL
									 ,NOTE                    VARCHAR(10) NULL
									 ,COMMENTS                NVARCHAR(512) NULL
									 ,SERVICEABILITYINDICATOR VARCHAR(1) NULL
									 ,PARENTAGE               SMALLINT NULL
									 ,CCRINDICATOR            VARCHAR(1) NULL
									 ,FILTERPARTINDICATOR     VARCHAR(1) NULL
									 ,MAINTPARTINDICATOR      VARCHAR(1) NULL
									 ,NPRINDICATOR            VARCHAR(1) NULL
									 ,LASTMODIFIEDDATE        VARCHAR(50) NULL);

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		/* MERGE command */
		MERGE INTO SISWEB_OWNER_SHADOW.LNKCONSISTLIST tgt
		USING SISWEB_OWNER.LNKCONSISTLIST src
		ON src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER AND 
		   src.PARTSEQUENCENUMBER = tgt.PARTSEQUENCENUMBER
		WHEN MATCHED AND EXISTS
		(
			SELECT src.REFERENCENO,src.GRAPHNO,src.PARTNUMBER,src.ORGCODE,src.PARTNAME,src.PARTMODIFIER,src.QUANTITY,src.NOTE,src.COMMENTS,src.SERVICEABILITYINDICATOR,src.PARENTAGE,src.
			CCRINDICATOR,src.FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR
			EXCEPT
			SELECT tgt.REFERENCENO,tgt.GRAPHNO,tgt.PARTNUMBER,tgt.ORGCODE,tgt.PARTNAME,tgt.PARTMODIFIER,tgt.QUANTITY,tgt.NOTE,tgt.COMMENTS,tgt.SERVICEABILITYINDICATOR,tgt.PARENTAGE,tgt.
			CCRINDICATOR,tgt.FILTERPARTINDICATOR,tgt.MAINTPARTINDICATOR,tgt.NPRINDICATOR
		)
			  THEN UPDATE SET tgt.REFERENCENO = src.REFERENCENO,tgt.GRAPHNO = src.GRAPHNO,tgt.PARTNUMBER = src.PARTNUMBER,tgt.ORGCODE = src.ORGCODE,tgt.PARTNAME = src.PARTNAME,tgt.PARTMODIFIER
			  = src.PARTMODIFIER,tgt.QUANTITY = src.QUANTITY,tgt.NOTE = src.NOTE,tgt.COMMENTS = src.COMMENTS,tgt.SERVICEABILITYINDICATOR = src.SERVICEABILITYINDICATOR,tgt.PARENTAGE =
			  src.PARENTAGE,tgt.CCRINDICATOR = src.CCRINDICATOR,tgt.FILTERPARTINDICATOR = src.FILTERPARTINDICATOR,tgt.MAINTPARTINDICATOR = src.MAINTPARTINDICATOR,tgt.NPRINDICATOR
			  = src.NPRINDICATOR,tgt.LASTMODIFIEDDATE = src.LASTMODIFIEDDATE
		WHEN NOT MATCHED BY TARGET
			  THEN
			  INSERT(IESYSTEMCONTROLNUMBER,PARTSEQUENCENUMBER,REFERENCENO,GRAPHNO,PARTNUMBER,ORGCODE,PARTNAME,PARTMODIFIER,QUANTITY,NOTE,COMMENTS,SERVICEABILITYINDICATOR,PARENTAGE,
			  CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,LASTMODIFIEDDATE)
			  VALUES (src.IESYSTEMCONTROLNUMBER,src.PARTSEQUENCENUMBER,src.REFERENCENO,src.GRAPHNO,src.PARTNUMBER,src.ORGCODE,src.PARTNAME,src.PARTMODIFIER,src.QUANTITY,src.NOTE,src.COMMENTS,
			  src.SERVICEABILITYINDICATOR,src.PARENTAGE,src.CCRINDICATOR,src.FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR,src.LASTMODIFIEDDATE) 
		WHEN NOT MATCHED BY SOURCE
			  THEN DELETE
		OUTPUT $ACTION,COALESCE(inserted.IESYSTEMCONTROLNUMBER,deleted.IESYSTEMCONTROLNUMBER) IESYSTEMCONTROLNUMBER,COALESCE(inserted.PARTSEQUENCENUMBER,deleted.PARTSEQUENCENUMBER)
		PARTSEQUENCENUMBER,COALESCE(inserted.REFERENCENO,deleted.REFERENCENO) REFERENCENO,COALESCE(inserted.GRAPHNO,deleted.GRAPHNO) GRAPHNO,COALESCE(inserted.PARTNUMBER,deleted.
		PARTNUMBER) PARTNUMBER,COALESCE(inserted.ORGCODE,deleted.ORGCODE) ORGCODE,COALESCE(inserted.PARTNAME,deleted.PARTNAME) PARTNAME,COALESCE(inserted.PARTMODIFIER,deleted.PARTMODIFIER)
        PARTMODIFIER,COALESCE(inserted.QUANTITY,deleted.QUANTITY) QUANTITY,COALESCE(inserted.NOTE,deleted.NOTE) NOTE,COALESCE(inserted.COMMENTS,deleted.COMMENTS) COMMENTS,COALESCE(inserted.SERVICEABILITYINDICATOR,
		deleted.SERVICEABILITYINDICATOR) SERVICEABILITYINDICATOR,COALESCE(inserted.PARENTAGE,deleted.PARENTAGE) PARENTAGE,COALESCE(inserted.CCRINDICATOR,deleted.CCRINDICATOR)
		CCRINDICATOR,COALESCE(inserted.FILTERPARTINDICATOR,deleted.FILTERPARTINDICATOR) FILTERPARTINDICATOR,COALESCE(inserted.MAINTPARTINDICATOR,deleted.MAINTPARTINDICATOR)
		MAINTPARTINDICATOR,COALESCE(inserted.NPRINDICATOR,deleted.NPRINDICATOR) NPRINDICATOR,COALESCE(inserted.LASTMODIFIEDDATE,deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
			   INTO @MERGE_RESULTS;

		/* MERGE command */
		SELECT @MERGED_ROWS = @@ROWCOUNT;

		SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
		(
			SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'UPDATE')
			AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
			(
				SELECT MR.ACTIONTYPE,MR.IESYSTEMCONTROLNUMBER,MR.PARTSEQUENCENUMBER,MR.REFERENCENO,MR.GRAPHNO,MR.PARTNUMBER,MR.ORGCODE,MR.PARTNAME,MR.PARTMODIFIER,MR.QUANTITY,MR.NOTE,MR.
				COMMENTS,MR.SERVICEABILITYINDICATOR,MR.PARENTAGE,MR.CCRINDICATOR,MR.FILTERPARTINDICATOR,MR.MAINTPARTINDICATOR,MR.NPRINDICATOR,MR.LASTMODIFIEDDATE
				FROM @MERGE_RESULTS AS MR FOR JSON AUTO
			) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
		),'Modified Rows');
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;

		COMMIT;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
	END CATCH;
END;