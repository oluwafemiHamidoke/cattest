
-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200114
-- Modify Date: 20200205	fixed deadlock error
-- Modify Date: 20200416	modify the LNKCONSISTLIST_Insert_Update_Delete and LNKMEDIAIEPART_Insert_Update_Delete to populate SHADOW schema 
-- Description: Conditional load from STAGING LNKCONSISTLIST
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKCONSISTLIST_Insert_Update_Delete (@FORCE_LOAD BIT = 'FALSE'
																		 ,@DEBUG      BIT = 'FALSE') 
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY
		DECLARE @SCHEMANAME_SIS sysname = 'SISWEB_OWNER_STAGING'
		       ,@SCHEMANAME_EMP sysname = 'EMP_STAGING'
			   ,@TABLENAME  sysname = 'LNKCONSISTLIST';

		DECLARE @FULLTABLENAME_SIS   sysname = @SCHEMANAME_SIS + '.' + @TABLENAME
			   ,@FULLTABLENAME_EMP   sysname = @SCHEMANAME_EMP + '.' + @TABLENAME
			   ,@CURRENT_VERSION BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

		DECLARE @LAST_SYNCHRONIZATION_VERSION_SIS BIGINT           = SISWEB_OWNER_STAGING._getLastSynchVersion (@FULLTABLENAME_SIS)
			   ,@LAST_SYNCHRONIZATION_VERSION_EMP BIGINT           = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_EMP)
			   ,@RESULT                       BIT
			   ,@ROWCOUNT                     BIGINT
			   ,@MERGED_ROWS                  BIGINT           = 0
			   ,@SYSUTCDATETIME               DATETIME2(6)     = SYSUTCDATETIME()
			   ,@PROCNAME                     VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID                    UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE                   VARCHAR(MAX)
			   ,@DEFAULT_ORGCODE			  VARCHAR(12) 	   = SISWEB_OWNER_STAGING._getDefaultORGCODE();

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE              NVARCHAR(10)
									 ,IESYSTEMCONTROLNUMBER   VARCHAR(12) NOT NULL
									 ,PARTSEQUENCENUMBER      SMALLINT NOT NULL
									 ,REFERENCENO             VARCHAR(50) NULL
									 ,GRAPHNO                 VARCHAR(50) NULL
									 ,PARTNUMBER              VARCHAR(40) NOT NULL
									 ,ORGCODE				  VARCHAR(12) NOT NULL
									 ,PARTNAME                NVARCHAR(64) NULL
									 ,PARTMODIFIER            NVARCHAR(512) NULL
									 ,QUANTITY                VARCHAR(24) NULL
									 ,NOTE                    VARCHAR(10) NULL
									 ,COMMENTS                NVARCHAR(512) NULL
									 ,SERVICEABILITYINDICATOR VARCHAR(1) NULL
									 ,PARENTAGE               SMALLINT NULL
									 ,CCRINDICATOR            VARCHAR(1) NULL
									 ,FILTERPARTINDICATOR     VARCHAR(1) NULL
									 ,MAINTPARTINDICATOR      VARCHAR(1) NULL
									 ,NPRINDICATOR            VARCHAR(1) NULL
									 ,LASTMODIFIEDDATE        VARCHAR(50) NULL);

/* 
	Davide 20200205 
	in order to avoid deadlocks errors like: "Transaction (Process ID 246) was deadlocked on lock | communication buffer resources with another process and has been chosen as the deadlock victim. Rerun the transaction.",
	we move the creation of temp table outside the TRANSACTION block, even if it is not extremely elegant
*/
		DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS;
		SELECT * INTO #DIFF_PRIMARY_KEYS FROM (
		SELECT CT.[IESYSTEMCONTROLNUMBER],CT.[PARTSEQUENCENUMBER]
		,T.[REFERENCENO],T.[GRAPHNO],T.[PARTNUMBER],T.[ORGCODE],T.[PARTNAME],T.[PARTMODIFIER],T.[QUANTITY],T.[NOTE],T.[COMMENTS],T.[SERVICEABILITYINDICATOR],T.[PARENTAGE],T.[CCRINDICATOR],T.[FILTERPARTINDICATOR],T.[MAINTPARTINDICATOR],T.[NPRINDICATOR],T.[LASTMODIFIEDDATE]
		,CT.SYS_CHANGE_OPERATION AS OPERATION,CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION,CT.SYS_CHANGE_COLUMNS AS SYS_CHANGE_COLUMNS
		FROM [EMP_STAGING].[LNKCONSISTLIST] as T
		RIGHT JOIN CHANGETABLE(CHANGES [EMP_STAGING].[LNKCONSISTLIST],@LAST_SYNCHRONIZATION_VERSION_EMP) as CT
		ON T.IESYSTEMCONTROLNUMBER = CT.IESYSTEMCONTROLNUMBER
		and T.PARTSEQUENCENUMBER = CT.PARTSEQUENCENUMBER
		WHERE 	CT.SYS_CHANGE_COLUMNS <> 0x0000000012000000 OR 
				CT.SYS_CHANGE_COLUMNS IS NULL
		UNION ALL
		SELECT CT.[IESYSTEMCONTROLNUMBER],CT.[PARTSEQUENCENUMBER]
		,T.[REFERENCENO],T.[GRAPHNO],T.[PARTNUMBER],@DEFAULT_ORGCODE as [ORGCODE],T.[PARTNAME],T.[PARTMODIFIER],T.[QUANTITY],T.[NOTE],T.[COMMENTS],T.[SERVICEABILITYINDICATOR],T.[PARENTAGE],T.[CCRINDICATOR],T.[FILTERPARTINDICATOR],T.[MAINTPARTINDICATOR],T.[NPRINDICATOR],T.[LASTMODIFIEDDATE]
		,CT.SYS_CHANGE_OPERATION AS OPERATION,CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION,CT.SYS_CHANGE_COLUMNS AS SYS_CHANGE_COLUMNS
		FROM [SISWEB_OWNER_STAGING].[LNKCONSISTLIST] as T
		RIGHT JOIN CHANGETABLE(CHANGES [SISWEB_OWNER_STAGING].[LNKCONSISTLIST],@LAST_SYNCHRONIZATION_VERSION_SIS) as CT
		ON T.IESYSTEMCONTROLNUMBER = CT.IESYSTEMCONTROLNUMBER
		and T.PARTSEQUENCENUMBER = CT.PARTSEQUENCENUMBER 
		WHERE 	CT.SYS_CHANGE_COLUMNS <> 0x0000000011000000 OR 
				CT.SYS_CHANGE_COLUMNS IS NULL) AS DIFF;

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		IF @FORCE_LOAD = 'FALSE'
		BEGIN
			EXEC SISWEB_OWNER_STAGING._getFullOrDiffWithEMP @TABLENAME = @TABLENAME,@CURRENT_VERSION = @CURRENT_VERSION,@DEBUG = @DEBUG,@RESULT = @RESULT OUTPUT
			;

			IF @DEBUG = 'TRUE'
				PRINT FORMATMESSAGE('@RESULT=%s',IIF(@RESULT = 1,'TRUE','FALSE'));

			IF @RESULT = 'TRUE'
			BEGIN
				-- 6. Obtain the changes

				IF @DEBUG = 'TRUE'
					SELECT * FROM #DIFF_PRIMARY_KEYS AS DK;

				-- 7.a Delete if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'D';
				IF @ROWCOUNT > 0
				BEGIN
					DELETE FROM SISWEB_OWNER_SHADOW.LNKCONSISTLIST
					OUTPUT 'DELETE' ACTIONTYPE,DELETED.IESYSTEMCONTROLNUMBER,DELETED.PARTSEQUENCENUMBER,DELETED.REFERENCENO,DELETED.GRAPHNO,DELETED.PARTNUMBER,DELETED.ORGCODE,DELETED.PARTNAME,
					DELETED.PARTMODIFIER,DELETED.QUANTITY,DELETED.NOTE,DELETED.COMMENTS,DELETED.SERVICEABILITYINDICATOR,DELETED.PARENTAGE,DELETED.CCRINDICATOR,DELETED.
					FILTERPARTINDICATOR,DELETED.MAINTPARTINDICATOR,DELETED.NPRINDICATOR,DELETED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					WHERE EXISTS
					(
						SELECT *
						FROM #DIFF_PRIMARY_KEYS AS DK
						WHERE DK.IESYSTEMCONTROLNUMBER = LNKCONSISTLIST.IESYSTEMCONTROLNUMBER AND 
							  DK.PARTSEQUENCENUMBER = LNKCONSISTLIST.PARTSEQUENCENUMBER AND 
							  DK.OPERATION = 'D'
					);

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Deleted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.b Insert if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'I';
				IF @ROWCOUNT > 0
				BEGIN
					INSERT INTO SISWEB_OWNER_SHADOW.LNKCONSISTLIST (IESYSTEMCONTROLNUMBER,PARTSEQUENCENUMBER,REFERENCENO,GRAPHNO,PARTNUMBER,ORGCODE,PARTNAME,PARTMODIFIER,QUANTITY,NOTE,
					COMMENTS,SERVICEABILITYINDICATOR,PARENTAGE,CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,LASTMODIFIEDDATE) 
					OUTPUT 'INSERT' ACTIONTYPE,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.PARTSEQUENCENUMBER,INSERTED.REFERENCENO,INSERTED.GRAPHNO,INSERTED.PARTNUMBER,INSERTED.ORGCODE,INSERTED.
					PARTNAME,INSERTED.PARTMODIFIER,INSERTED.QUANTITY,INSERTED.NOTE,INSERTED.COMMENTS,INSERTED.SERVICEABILITYINDICATOR,INSERTED.PARENTAGE,INSERTED.CCRINDICATOR,
					INSERTED.FILTERPARTINDICATOR,INSERTED.MAINTPARTINDICATOR,INSERTED.NPRINDICATOR,INSERTED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
						   SELECT IESYSTEMCONTROLNUMBER,PARTSEQUENCENUMBER,REFERENCENO,GRAPHNO,PARTNUMBER,ORGCODE,PARTNAME,PARTMODIFIER,QUANTITY,NOTE,COMMENTS,SERVICEABILITYINDICATOR,
						   PARENTAGE,CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,@SYSUTCDATETIME
						   FROM #DIFF_PRIMARY_KEYS AS DK
						   WHERE DK.OPERATION = 'I';
						   

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Inserted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.c Update if needed
				SELECT @ROWCOUNT = COUNT(*)
				FROM #DIFF_PRIMARY_KEYS AS DK
				WHERE DK.OPERATION = 'U';
				IF @ROWCOUNT > 0
				BEGIN
					UPDATE SISWEB_OWNER_SHADOW.LNKCONSISTLIST
					  SET REFERENCENO = ST.REFERENCENO,GRAPHNO = ST.GRAPHNO,PARTNUMBER = ST.PARTNUMBER,ORGCODE = ST.ORGCODE,PARTNAME = ST.PARTNAME,PARTMODIFIER = ST.PARTMODIFIER,QUANTITY = ST.QUANTITY,
					  NOTE = ST.NOTE,COMMENTS = ST.COMMENTS,SERVICEABILITYINDICATOR = ST.SERVICEABILITYINDICATOR,PARENTAGE = ST.PARENTAGE,CCRINDICATOR = ST.CCRINDICATOR,
					  FILTERPARTINDICATOR = ST.FILTERPARTINDICATOR,MAINTPARTINDICATOR = ST.MAINTPARTINDICATOR,NPRINDICATOR = ST.NPRINDICATOR,LASTMODIFIEDDATE = @SYSUTCDATETIME
					OUTPUT 'UPDATE' ACTIONTYPE,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.PARTSEQUENCENUMBER,INSERTED.REFERENCENO,INSERTED.GRAPHNO,INSERTED.PARTNUMBER,INSERTED.ORGCODE,INSERTED.
					PARTNAME,INSERTED.PARTMODIFIER,INSERTED.QUANTITY,INSERTED.NOTE,INSERTED.COMMENTS,INSERTED.SERVICEABILITYINDICATOR,INSERTED.PARENTAGE,INSERTED.CCRINDICATOR,
					INSERTED.FILTERPARTINDICATOR,INSERTED.MAINTPARTINDICATOR,INSERTED.NPRINDICATOR,INSERTED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					FROM #DIFF_PRIMARY_KEYS AS ST
						 JOIN SISWEB_OWNER_SHADOW.LNKCONSISTLIST AS TT ON ST.IESYSTEMCONTROLNUMBER = TT.IESYSTEMCONTROLNUMBER AND 
																		  ST.PARTSEQUENCENUMBER = TT.PARTSEQUENCENUMBER
																		  WHERE ST.OPERATION = 'U';
					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Updated %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 8. Store current version to be used the next time
				IF @DEBUG = 'TRUE'
					SELECT * FROM @MERGE_RESULTS AS MR;

				SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
				(
					SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
					'UPDATE'
					) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
					(
						SELECT MR.ACTIONTYPE,MR.IESYSTEMCONTROLNUMBER,MR.PARTSEQUENCENUMBER,MR.REFERENCENO,MR.GRAPHNO,MR.PARTNUMBER,MR.ORGCODE,MR.PARTNAME,MR.PARTMODIFIER,MR.QUANTITY,MR.NOTE,
						MR.COMMENTS,MR.SERVICEABILITYINDICATOR,MR.PARENTAGE,MR.CCRINDICATOR,MR.FILTERPARTINDICATOR,MR.MAINTPARTINDICATOR,MR.NPRINDICATOR,MR.LASTMODIFIEDDATE
						FROM @MERGE_RESULTS AS MR FOR JSON AUTO
					) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
				),'Modified Rows');
				EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
			END;
		END;

		/* to be done: handle full load with MERGE */
		IF @FORCE_LOAD = 'TRUE'
		--   OR @MODIFIED_ROWS_PERCENTAGE BETWEEN-0.10 AND 0.10
		BEGIN
			SET @LOGMESSAGE = 'Executing load: Force Load = TRUE';
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @FORCE_LOAD;

			/* MERGE command */
			MERGE INTO SISWEB_OWNER_SHADOW.LNKCONSISTLIST tgt
			USING (
				SELECT [IESYSTEMCONTROLNUMBER],[PARTSEQUENCENUMBER]
				,[REFERENCENO],[GRAPHNO],[PARTNUMBER],[ORGCODE],[PARTNAME],[PARTMODIFIER],[QUANTITY],[NOTE],[COMMENTS],[SERVICEABILITYINDICATOR],[PARENTAGE],[CCRINDICATOR],[FILTERPARTINDICATOR],[MAINTPARTINDICATOR],[NPRINDICATOR],[LASTMODIFIEDDATE]
				FROM [EMP_STAGING].[LNKCONSISTLIST]
				UNION ALL
				SELECT [IESYSTEMCONTROLNUMBER],[PARTSEQUENCENUMBER]
				,[REFERENCENO],[GRAPHNO],[PARTNUMBER],@DEFAULT_ORGCODE as [ORGCODE],[PARTNAME],[PARTMODIFIER],[QUANTITY],[NOTE],[COMMENTS],[SERVICEABILITYINDICATOR],[PARENTAGE],[CCRINDICATOR],[FILTERPARTINDICATOR],[MAINTPARTINDICATOR],[NPRINDICATOR],[LASTMODIFIEDDATE]
				FROM [SISWEB_OWNER_STAGING].[LNKCONSISTLIST]
			) src
			ON src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER AND 
			   src.PARTSEQUENCENUMBER = tgt.PARTSEQUENCENUMBER
			WHEN MATCHED AND EXISTS
			(
				SELECT src.REFERENCENO,src.GRAPHNO,src.PARTNUMBER,src.ORGCODE,src.PARTNAME,src.PARTMODIFIER,src.QUANTITY,src.NOTE,src.COMMENTS,src.SERVICEABILITYINDICATOR,src.PARENTAGE,src.
				CCRINDICATOR,src.FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR
				EXCEPT
				SELECT tgt.REFERENCENO,tgt.GRAPHNO,tgt.PARTNUMBER,tgt.ORGCODE,tgt.PARTNAME,tgt.PARTMODIFIER,tgt.QUANTITY,tgt.NOTE,tgt.COMMENTS,tgt.SERVICEABILITYINDICATOR,tgt.PARENTAGE,tgt.
				CCRINDICATOR,tgt.FILTERPARTINDICATOR,tgt.MAINTPARTINDICATOR,tgt.NPRINDICATOR
			)
				  THEN UPDATE SET tgt.REFERENCENO = src.REFERENCENO,tgt.GRAPHNO = src.GRAPHNO,tgt.PARTNUMBER = src.PARTNUMBER,tgt.ORGCODE = src.ORGCODE,tgt.PARTNAME = src.PARTNAME,tgt.PARTMODIFIER = src.
				  PARTMODIFIER,tgt.QUANTITY = src.QUANTITY,tgt.NOTE = src.NOTE,tgt.COMMENTS = src.COMMENTS,tgt.SERVICEABILITYINDICATOR = src.SERVICEABILITYINDICATOR,tgt.PARENTAGE
				  = src.PARENTAGE,tgt.CCRINDICATOR = src.CCRINDICATOR,tgt.FILTERPARTINDICATOR = src.FILTERPARTINDICATOR,tgt.MAINTPARTINDICATOR = src.MAINTPARTINDICATOR,tgt.
				  NPRINDICATOR = src.NPRINDICATOR,tgt.LASTMODIFIEDDATE = @SYSUTCDATETIME
			WHEN NOT MATCHED BY TARGET
				  THEN
				  INSERT(IESYSTEMCONTROLNUMBER,PARTSEQUENCENUMBER,REFERENCENO,GRAPHNO,PARTNUMBER,ORGCODE,PARTNAME,PARTMODIFIER,QUANTITY,NOTE,COMMENTS,SERVICEABILITYINDICATOR,PARENTAGE,
				  CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,LASTMODIFIEDDATE)
				  VALUES (src.IESYSTEMCONTROLNUMBER,src.PARTSEQUENCENUMBER,src.REFERENCENO,src.GRAPHNO,src.PARTNUMBER,src.ORGCODE,src.PARTNAME,src.PARTMODIFIER,src.QUANTITY,src.NOTE,src.
				  COMMENTS,src.SERVICEABILITYINDICATOR,src.PARENTAGE,src.CCRINDICATOR,src.FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR,@SYSUTCDATETIME) 
			WHEN NOT MATCHED BY SOURCE
				  THEN DELETE
			OUTPUT $ACTION,COALESCE(inserted.IESYSTEMCONTROLNUMBER,deleted.IESYSTEMCONTROLNUMBER) IESYSTEMCONTROLNUMBER,COALESCE(inserted.PARTSEQUENCENUMBER,deleted.
			PARTSEQUENCENUMBER) PARTSEQUENCENUMBER,COALESCE(inserted.REFERENCENO,deleted.REFERENCENO) REFERENCENO,COALESCE(inserted.GRAPHNO,deleted.GRAPHNO) GRAPHNO,COALESCE(
			inserted.PARTNUMBER,deleted.PARTNUMBER) PARTNUMBER,COALESCE(inserted.ORGCODE,deleted.ORGCODE) ORGCODE,COALESCE(inserted.PARTNAME,deleted.PARTNAME) PARTNAME,COALESCE(inserted.PARTMODIFIER,deleted.PARTMODIFIER)
			PARTMODIFIER,COALESCE(inserted.QUANTITY,deleted.QUANTITY) QUANTITY,COALESCE(inserted.NOTE,deleted.NOTE) NOTE,COALESCE(inserted.COMMENTS,deleted.COMMENTS) COMMENTS,
			COALESCE(inserted.SERVICEABILITYINDICATOR,deleted.SERVICEABILITYINDICATOR) SERVICEABILITYINDICATOR,COALESCE(inserted.PARENTAGE,deleted.PARENTAGE) PARENTAGE,COALESCE(
			inserted.CCRINDICATOR,deleted.CCRINDICATOR) CCRINDICATOR,COALESCE(inserted.FILTERPARTINDICATOR,deleted.FILTERPARTINDICATOR) FILTERPARTINDICATOR,COALESCE(inserted.
			MAINTPARTINDICATOR,deleted.MAINTPARTINDICATOR) MAINTPARTINDICATOR,COALESCE(inserted.NPRINDICATOR,deleted.NPRINDICATOR) NPRINDICATOR,COALESCE(inserted.LASTMODIFIEDDATE,
			deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
				   INTO @MERGE_RESULTS;

			/* MERGE command */
			SELECT @MERGED_ROWS = @@ROWCOUNT;

			SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
			(
				SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
				'UPDATE'
				) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
				(
					SELECT MR.ACTIONTYPE,MR.IESYSTEMCONTROLNUMBER,MR.PARTSEQUENCENUMBER,MR.REFERENCENO,MR.GRAPHNO,MR.PARTNUMBER,MR.ORGCODE,MR.PARTNAME,MR.PARTMODIFIER,MR.QUANTITY,MR.NOTE,MR.
					COMMENTS,MR.SERVICEABILITYINDICATOR,MR.PARENTAGE,MR.CCRINDICATOR,MR.FILTERPARTINDICATOR,MR.MAINTPARTINDICATOR,MR.NPRINDICATOR,MR.LASTMODIFIEDDATE
					FROM @MERGE_RESULTS AS MR FOR JSON AUTO
				) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
			),'Modified Rows');
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
		END;

        EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME_SIS, @CURRENT_VERSION;
		EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_EMP, @CURRENT_VERSION;

        SET @LOGMESSAGE = FORMATMESSAGE('Version before running sproc: %s and after running sproc %s', CAST(@CURRENT_VERSION  as varchar(max)),  CAST(CHANGE_TRACKING_CURRENT_VERSION() as varchar(max)));
        EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = NULL;

		COMMIT;
                    -- If MS does fix the stats when the table swap then uncomment the below line 

					-- UPDATE STATISTICS SISWEB_OWNER_SHADOW.LNKCONSISTLIST WITH FULLSCAN;

		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
		THROW;
	END CATCH;
END;
GO

