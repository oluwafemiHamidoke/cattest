
-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200109
-- Modify Date: 20200205	fixed deadlock error
-- Modify Date: 20200416	modify the LNKCONSISTLIST_Insert_Update_Delete and LNKMEDIAIEPART_Insert_Update_Delete to populate SHADOW schema 
-- Modify Date: 20201120 - Davide: added UPDATE STATS see: https://dev.azure.com/sis-cat-com/devops-infra/_workitems/edit/86007
-- Description: Conditional load from STAGING LNKMEDIAIEPART
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKMEDIAIEPART_Insert_Update_Delete (@FORCE_LOAD BIT = 'FALSE'
																		 ,@DEBUG      BIT = 'FALSE')
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY
		DECLARE @SCHEMANAME_SIS sysname = 'SISWEB_OWNER_STAGING'
               ,@SCHEMANAME_EMP sysname = 'EMP_STAGING'
			   ,@TABLENAME  sysname = 'LNKMEDIAIEPART';

		DECLARE @FULLTABLENAME_SIS   sysname = @SCHEMANAME_SIS + '.' + @TABLENAME
               ,@FULLTABLENAME_EMP   sysname = @SCHEMANAME_EMP + '.' + @TABLENAME
			   ,@CURRENT_VERSION BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

		DECLARE @LAST_SYNCHRONIZATION_VERSION_SIS BIGINT           = SISWEB_OWNER_STAGING._getLastSynchVersion (@FULLTABLENAME_SIS)
               ,@LAST_SYNCHRONIZATION_VERSION_EMP BIGINT           = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_EMP)
			   ,@RESULT                       BIT
			   ,@ROWCOUNT                     BIGINT
			   ,@MERGED_ROWS                  BIGINT           = 0
			   ,@SYSUTCDATETIME               DATETIME2(6)     = SYSUTCDATETIME()
			   ,@PROCNAME                     VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID                    UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE                   VARCHAR(MAX)
               ,@DEFAULT_ORGCODE			  VARCHAR(12) 	   = SISWEB_OWNER_STAGING._getDefaultORGCODE();

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE              NVARCHAR(10)
									 ,MEDIANUMBER             VARCHAR(8) NOT NULL
									 ,IESYSTEMCONTROLNUMBER   VARCHAR(12) NOT NULL
									 ,IEPARTNUMBER            VARCHAR(40) NULL
                                     ,ORGCODE			      VARCHAR(12) NULL
									 ,IEPARTNAME              NVARCHAR(128) NULL
									 ,IESEQUENCENUMBER        INT NOT NULL
									 ,BASEENGCONTROLNO        VARCHAR(12) NOT NULL
									 ,SECTIONNUMBER           INT NOT NULL
									 ,IEPARTMODIFIER          NVARCHAR(512) NULL
									 ,IECAPTION               NVARCHAR(2048) NOT NULL
									 ,IETYPE                  VARCHAR(1) NOT NULL
									 ,SERVICEABILITYINDICATOR VARCHAR(1) NOT NULL
									 ,IEUPDATEDATE            DATETIME2(0) NOT NULL
									 ,IECONTROLNUMBER         VARCHAR(25) NULL
									 ,PART                    VARCHAR(2) NULL
									 ,OFPARTS                 VARCHAR(2) NULL
									 ,ARRANGEMENTINDICATOR    VARCHAR(1) NOT NULL
									 ,CCRINDICATOR            VARCHAR(1) NOT NULL
									 ,FILTERPARTINDICATOR     VARCHAR(1) NOT NULL
									 ,MAINTPARTINDICATOR      VARCHAR(1) NOT NULL
									 ,NPRINDICATOR            VARCHAR(1) NULL
									 ,TYPECHANGEINDICATOR     VARCHAR(1) NULL
									 ,LASTMODIFIEDDATE        VARCHAR(50) NULL);

/* 
	Davide 20200205 
	in order to avoid deadlocks errors like: "Transaction (Process ID 246) was deadlocked on lock | communication buffer resources with another process and has been chosen as the deadlock victim. Rerun the transaction.",
	we move the creation of temp table outside the TRANSACTION block, even if it is not extremely elegant
*/
        DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS;
        SELECT * INTO #DIFF_PRIMARY_KEYS FROM (
            SELECT CT.[MEDIANUMBER],CT.[IESYSTEMCONTROLNUMBER],T.[IEPARTNUMBER],T.[ORGCODE],T.[IEPARTNAME],T.[IESEQUENCENUMBER],
               T.[BASEENGCONTROLNO],T.[SECTIONNUMBER],T.[IEPARTMODIFIER],T.[IECAPTION],T.[IETYPE],T.[SERVICEABILITYINDICATOR],
               T.[IEUPDATEDATE],T.[IECONTROLNUMBER],T.[PART],T.[OFPARTS],T.[ARRANGEMENTINDICATOR],T.[CCRINDICATOR],
               T.[FILTERPARTINDICATOR],T.[MAINTPARTINDICATOR],T.[NPRINDICATOR],T.[TYPECHANGEINDICATOR],T.[LASTMODIFIEDDATE],
               CT.SYS_CHANGE_OPERATION AS OPERATION,CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION,CT.SYS_CHANGE_COLUMNS AS SYS_CHANGE_COLUMNS
               FROM [EMP_STAGING].[LNKMEDIAIEPART] AS T
            RIGHT JOIN CHANGETABLE(CHANGES [EMP_STAGING].[LNKMEDIAIEPART],@LAST_SYNCHRONIZATION_VERSION_EMP) AS CT
            ON T.MEDIANUMBER = CT.MEDIANUMBER
            AND T.IESYSTEMCONTROLNUMBER = CT.IESYSTEMCONTROLNUMBER
            WHERE CT.SYS_CHANGE_COLUMNS <> 0x0000000017000000 OR
                  CT.SYS_CHANGE_COLUMNS IS NULL
            UNION
            SELECT CT.[MEDIANUMBER],CT.[IESYSTEMCONTROLNUMBER],T.[IEPARTNUMBER],@DEFAULT_ORGCODE as [ORGCODE],T.[IEPARTNAME],T.[IESEQUENCENUMBER],
                T.[BASEENGCONTROLNO],T.[SECTIONNUMBER],T.[IEPARTMODIFIER],T.[IECAPTION],T.[IETYPE],T.[SERVICEABILITYINDICATOR],
                T.[IEUPDATEDATE],T.[IECONTROLNUMBER],T.[PART],T.[OFPARTS],T.[ARRANGEMENTINDICATOR],T.[CCRINDICATOR],
                T.[FILTERPARTINDICATOR],T.[MAINTPARTINDICATOR],T.[NPRINDICATOR],T.[TYPECHANGEINDICATOR],T.[LASTMODIFIEDDATE],
                CT.SYS_CHANGE_OPERATION AS OPERATION,CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION,CT.SYS_CHANGE_COLUMNS AS SYS_CHANGE_COLUMNS
                FROM [SISWEB_OWNER_STAGING].[LNKMEDIAIEPART] AS T
                RIGHT JOIN CHANGETABLE(CHANGES [SISWEB_OWNER_STAGING].[LNKMEDIAIEPART],@LAST_SYNCHRONIZATION_VERSION_SIS) AS CT
                ON T.MEDIANUMBER = CT.MEDIANUMBER
                AND T.IESYSTEMCONTROLNUMBER = CT.IESYSTEMCONTROLNUMBER
                WHERE CT.SYS_CHANGE_COLUMNS <> 0x0000000016000000 OR
                CT.SYS_CHANGE_COLUMNS IS NULL) AS DIFF;

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		IF @FORCE_LOAD = 'FALSE'
		BEGIN
			EXEC SISWEB_OWNER_STAGING._getFullOrDiffWithEMP @TABLENAME = @TABLENAME,@CURRENT_VERSION = @CURRENT_VERSION,@DEBUG = @DEBUG,@RESULT = @RESULT OUTPUT
			;
			IF @DEBUG = 'TRUE'
				PRINT FORMATMESSAGE('@RESULT=%s',IIF(@RESULT = 1,'TRUE','FALSE'));

			IF @RESULT = 'TRUE'
			BEGIN
				-- 6. Obtain the changes

				IF @DEBUG = 'TRUE'
					SELECT * FROM #DIFF_PRIMARY_KEYS AS DK;

				-- 7.a Delete if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'D';
				IF @ROWCOUNT > 0
				BEGIN
					DELETE FROM SISWEB_OWNER_SHADOW.LNKMEDIAIEPART
					OUTPUT 'DELETE' ACTIONTYPE,DELETED.MEDIANUMBER,DELETED.IESYSTEMCONTROLNUMBER,DELETED.IEPARTNUMBER,DELETED.ORGCODE,DELETED.IEPARTNAME,DELETED.IESEQUENCENUMBER,DELETED.
					BASEENGCONTROLNO,DELETED.SECTIONNUMBER,DELETED.IEPARTMODIFIER,DELETED.IECAPTION,DELETED.IETYPE,DELETED.SERVICEABILITYINDICATOR,DELETED.IEUPDATEDATE,DELETED.
					IECONTROLNUMBER,DELETED.PART,DELETED.OFPARTS,DELETED.ARRANGEMENTINDICATOR,DELETED.CCRINDICATOR,DELETED.FILTERPARTINDICATOR,DELETED.MAINTPARTINDICATOR,DELETED.
					NPRINDICATOR,DELETED.TYPECHANGEINDICATOR,DELETED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					WHERE EXISTS
					(
						SELECT *
						FROM #DIFF_PRIMARY_KEYS AS DK
						WHERE DK.MEDIANUMBER = LNKMEDIAIEPART.MEDIANUMBER AND
							  DK.IESYSTEMCONTROLNUMBER = LNKMEDIAIEPART.IESYSTEMCONTROLNUMBER AND
							  DK.OPERATION = 'D'
					);

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Deleted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.b Insert if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'I';
				IF @ROWCOUNT > 0
				BEGIN
					INSERT INTO SISWEB_OWNER_SHADOW.LNKMEDIAIEPART (MEDIANUMBER,IESYSTEMCONTROLNUMBER,IEPARTNUMBER,ORGCODE,IEPARTNAME,IESEQUENCENUMBER,BASEENGCONTROLNO,SECTIONNUMBER,
					IEPARTMODIFIER,IECAPTION,IETYPE,SERVICEABILITYINDICATOR,IEUPDATEDATE,IECONTROLNUMBER,PART,OFPARTS,ARRANGEMENTINDICATOR,CCRINDICATOR,FILTERPARTINDICATOR,
					MAINTPARTINDICATOR,NPRINDICATOR,TYPECHANGEINDICATOR,LASTMODIFIEDDATE)
					OUTPUT 'INSERT' ACTIONTYPE,INSERTED.MEDIANUMBER,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.IEPARTNUMBER,INSERTED.ORGCODE,INSERTED.IEPARTNAME,INSERTED.IESEQUENCENUMBER,INSERTED.
					BASEENGCONTROLNO,INSERTED.SECTIONNUMBER,INSERTED.IEPARTMODIFIER,INSERTED.IECAPTION,INSERTED.IETYPE,INSERTED.SERVICEABILITYINDICATOR,INSERTED.IEUPDATEDATE,
					INSERTED.IECONTROLNUMBER,INSERTED.PART,INSERTED.OFPARTS,INSERTED.ARRANGEMENTINDICATOR,INSERTED.CCRINDICATOR,INSERTED.FILTERPARTINDICATOR,INSERTED.
					MAINTPARTINDICATOR,INSERTED.NPRINDICATOR,INSERTED.TYPECHANGEINDICATOR,INSERTED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
						   SELECT MEDIANUMBER,IESYSTEMCONTROLNUMBER,IEPARTNUMBER,ORGCODE,IEPARTNAME,IESEQUENCENUMBER,BASEENGCONTROLNO,SECTIONNUMBER,IEPARTMODIFIER,IECAPTION,IETYPE,
						   SERVICEABILITYINDICATOR,IEUPDATEDATE,IECONTROLNUMBER,PART,OFPARTS,ARRANGEMENTINDICATOR,CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,
						   TYPECHANGEINDICATOR,@SYSUTCDATETIME
                           FROM #DIFF_PRIMARY_KEYS AS DK
						   WHERE DK.OPERATION = 'I'


					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Inserted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.c Update if needed
				SELECT @ROWCOUNT = COUNT(*)
				FROM #DIFF_PRIMARY_KEYS AS DK
				WHERE DK.OPERATION = 'U'

				IF @ROWCOUNT > 0
				BEGIN
					UPDATE SISWEB_OWNER_SHADOW.LNKMEDIAIEPART
					  SET IEPARTNUMBER = ST.IEPARTNUMBER,ORGCODE = ST.ORGCODE,IEPARTNAME = ST.IEPARTNAME,IESEQUENCENUMBER = ST.IESEQUENCENUMBER,BASEENGCONTROLNO = ST.BASEENGCONTROLNO,SECTIONNUMBER =
					  ST.SECTIONNUMBER,IEPARTMODIFIER = ST.IEPARTMODIFIER,IECAPTION = ST.IECAPTION,IETYPE = ST.IETYPE,SERVICEABILITYINDICATOR = ST.SERVICEABILITYINDICATOR,
					  IEUPDATEDATE = ST.IEUPDATEDATE,IECONTROLNUMBER = ST.IECONTROLNUMBER,PART = ST.PART,OFPARTS = ST.OFPARTS,ARRANGEMENTINDICATOR = ST.ARRANGEMENTINDICATOR,
					  CCRINDICATOR = ST.CCRINDICATOR,FILTERPARTINDICATOR = ST.FILTERPARTINDICATOR,MAINTPARTINDICATOR = ST.MAINTPARTINDICATOR,NPRINDICATOR = ST.NPRINDICATOR,
					  TYPECHANGEINDICATOR = ST.TYPECHANGEINDICATOR,LASTMODIFIEDDATE = @SYSUTCDATETIME
					OUTPUT 'UPDATE' ACTIONTYPE,INSERTED.MEDIANUMBER,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.IEPARTNUMBER,INSERTED.ORGCODE,INSERTED.IEPARTNAME,INSERTED.IESEQUENCENUMBER,INSERTED.
					BASEENGCONTROLNO,INSERTED.SECTIONNUMBER,INSERTED.IEPARTMODIFIER,INSERTED.IECAPTION,INSERTED.IETYPE,INSERTED.SERVICEABILITYINDICATOR,INSERTED.IEUPDATEDATE,
					INSERTED.IECONTROLNUMBER,INSERTED.PART,INSERTED.OFPARTS,INSERTED.ARRANGEMENTINDICATOR,INSERTED.CCRINDICATOR,INSERTED.FILTERPARTINDICATOR,INSERTED.
					MAINTPARTINDICATOR,INSERTED.NPRINDICATOR,INSERTED.TYPECHANGEINDICATOR,INSERTED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					FROM #DIFF_PRIMARY_KEYS AS ST
						 JOIN SISWEB_OWNER_SHADOW.LNKMEDIAIEPART AS TT ON ST.MEDIANUMBER = TT.MEDIANUMBER AND
																		  ST.IESYSTEMCONTROLNUMBER = TT.IESYSTEMCONTROLNUMBER AND
                                                                          ST.OPERATION = 'U';

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Updated %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 8. Store current version to be used the next time
				IF @DEBUG = 'TRUE'
					SELECT * FROM @MERGE_RESULTS AS MR;

                EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME_SIS,@CURRENT_VERSION;
                EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_EMP,@CURRENT_VERSION;

				SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
				(
					SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
					'UPDATE'
					) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
					(
						SELECT MR.ACTIONTYPE,MR.MEDIANUMBER,MR.IESYSTEMCONTROLNUMBER,MR.IEPARTNUMBER,MR.ORGCODE,MR.IEPARTNAME,MR.IESEQUENCENUMBER,MR.BASEENGCONTROLNO,MR.SECTIONNUMBER,MR.
						IEPARTMODIFIER,MR.IECAPTION,MR.IETYPE,MR.SERVICEABILITYINDICATOR,MR.IEUPDATEDATE,MR.IECONTROLNUMBER,MR.PART,MR.OFPARTS,MR.ARRANGEMENTINDICATOR,MR.
						CCRINDICATOR,MR.FILTERPARTINDICATOR,MR.MAINTPARTINDICATOR,MR.NPRINDICATOR,MR.TYPECHANGEINDICATOR,MR.LASTMODIFIEDDATE
						FROM @MERGE_RESULTS AS MR FOR JSON AUTO
					) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
				),'Modified Rows');
				EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
			END;
		END;

		/* to be done: handle full load with MERGE */
		IF @FORCE_LOAD = 'TRUE'
		--   OR @MODIFIED_ROWS_PERCENTAGE BETWEEN-0.10 AND 0.10
		BEGIN
			SET @LOGMESSAGE = 'Executing load: Force Load = TRUE';
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @FORCE_LOAD;

			/* MERGE command */
			MERGE INTO SISWEB_OWNER_SHADOW.LNKMEDIAIEPART tgt
			USING (SELECT [MEDIANUMBER],[IESYSTEMCONTROLNUMBER],[IEPARTNUMBER],@DEFAULT_ORGCODE AS [ORGCODE],[IEPARTNAME],[IESEQUENCENUMBER],
                          [BASEENGCONTROLNO],[SECTIONNUMBER],[IEPARTMODIFIER],[IECAPTION],[IETYPE],[SERVICEABILITYINDICATOR],
                          [IEUPDATEDATE],[IECONTROLNUMBER],[PART],[OFPARTS],[ARRANGEMENTINDICATOR],[CCRINDICATOR],
                          [FILTERPARTINDICATOR],[MAINTPARTINDICATOR],[NPRINDICATOR],[TYPECHANGEINDICATOR],[LASTMODIFIEDDATE]
			        FROM [SISWEB_OWNER_STAGING].[LNKMEDIAIEPART]
			        UNION ALL
                   SELECT [MEDIANUMBER],[IESYSTEMCONTROLNUMBER],[IEPARTNUMBER],[ORGCODE],[IEPARTNAME],[IESEQUENCENUMBER],
                       [BASEENGCONTROLNO],[SECTIONNUMBER],[IEPARTMODIFIER],[IECAPTION],[IETYPE],[SERVICEABILITYINDICATOR],
                       [IEUPDATEDATE],[IECONTROLNUMBER],[PART],[OFPARTS],[ARRANGEMENTINDICATOR],[CCRINDICATOR],
                       [FILTERPARTINDICATOR],[MAINTPARTINDICATOR],[NPRINDICATOR],[TYPECHANGEINDICATOR],[LASTMODIFIEDDATE]
                   FROM [EMP_STAGING].[LNKMEDIAIEPART]) src
			ON src.MEDIANUMBER = tgt.MEDIANUMBER AND
			   src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER
			WHEN MATCHED AND EXISTS
			(
                    SELECT src.IEPARTNUMBER,src.ORGCODE,src.IEPARTNAME,src.IESEQUENCENUMBER,src.BASEENGCONTROLNO,src.SECTIONNUMBER,src.IEPARTMODIFIER,
                           src.IECAPTION,src.IETYPE,src.SERVICEABILITYINDICATOR,src.IEUPDATEDATE,src.IECONTROLNUMBER,src.PART,src.OFPARTS,
                           src.ARRANGEMENTINDICATOR,src.CCRINDICATOR,src.FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR,src.TYPECHANGEINDICATOR
                    EXCEPT
                    SELECT tgt.IEPARTNUMBER,tgt.ORGCODE,tgt.IEPARTNAME,tgt.IESEQUENCENUMBER,tgt.BASEENGCONTROLNO,tgt.SECTIONNUMBER,tgt.IEPARTMODIFIER,
                           tgt.IECAPTION,tgt.IETYPE,tgt.SERVICEABILITYINDICATOR,tgt.IEUPDATEDATE,tgt.IECONTROLNUMBER,tgt.PART,tgt.OFPARTS,
                           tgt.ARRANGEMENTINDICATOR,tgt.CCRINDICATOR,tgt.FILTERPARTINDICATOR,tgt.MAINTPARTINDICATOR,tgt.NPRINDICATOR,tgt.TYPECHANGEINDICATOR
			)
				  THEN UPDATE SET tgt.IEPARTNUMBER = src.IEPARTNUMBER,tgt.ORGCODE = src.ORGCODE,tgt.IEPARTNAME = src.IEPARTNAME,tgt.IESEQUENCENUMBER = src.IESEQUENCENUMBER,tgt.BASEENGCONTROLNO = src.
				  BASEENGCONTROLNO,tgt.SECTIONNUMBER = src.SECTIONNUMBER,tgt.IEPARTMODIFIER = src.IEPARTMODIFIER,tgt.IECAPTION = src.IECAPTION,tgt.IETYPE = src.IETYPE,tgt.
				  SERVICEABILITYINDICATOR = src.SERVICEABILITYINDICATOR,tgt.IEUPDATEDATE = src.IEUPDATEDATE,tgt.IECONTROLNUMBER = src.IECONTROLNUMBER,tgt.PART = src.PART,tgt.
				  OFPARTS = src.OFPARTS,tgt.ARRANGEMENTINDICATOR = src.ARRANGEMENTINDICATOR,tgt.CCRINDICATOR = src.CCRINDICATOR,tgt.FILTERPARTINDICATOR = src.FILTERPARTINDICATOR,
				  tgt.MAINTPARTINDICATOR = src.MAINTPARTINDICATOR,tgt.NPRINDICATOR = src.NPRINDICATOR,tgt.TYPECHANGEINDICATOR = src.TYPECHANGEINDICATOR,tgt.LASTMODIFIEDDATE =
				  @SYSUTCDATETIME
			WHEN NOT MATCHED BY TARGET
				  THEN
				  INSERT(MEDIANUMBER,IESYSTEMCONTROLNUMBER,IEPARTNUMBER,ORGCODE,IEPARTNAME,IESEQUENCENUMBER,BASEENGCONTROLNO,SECTIONNUMBER,IEPARTMODIFIER,IECAPTION,IETYPE,
				  SERVICEABILITYINDICATOR,IEUPDATEDATE,IECONTROLNUMBER,PART,OFPARTS,ARRANGEMENTINDICATOR,CCRINDICATOR,FILTERPARTINDICATOR,MAINTPARTINDICATOR,NPRINDICATOR,
				  TYPECHANGEINDICATOR,LASTMODIFIEDDATE)
				  VALUES (src.MEDIANUMBER,src.IESYSTEMCONTROLNUMBER,src.IEPARTNUMBER,src.ORGCODE,src.IEPARTNAME,src.IESEQUENCENUMBER,src.BASEENGCONTROLNO,src.SECTIONNUMBER,src.IEPARTMODIFIER,
				  src.IECAPTION,src.IETYPE,src.SERVICEABILITYINDICATOR,src.IEUPDATEDATE,src.IECONTROLNUMBER,src.PART,src.OFPARTS,src.ARRANGEMENTINDICATOR,src.CCRINDICATOR,src.
				  FILTERPARTINDICATOR,src.MAINTPARTINDICATOR,src.NPRINDICATOR,src.TYPECHANGEINDICATOR,@SYSUTCDATETIME)
			WHEN NOT MATCHED BY SOURCE
				  THEN DELETE
			OUTPUT $ACTION,COALESCE(inserted.MEDIANUMBER,deleted.MEDIANUMBER) MEDIANUMBER,COALESCE(inserted.IESYSTEMCONTROLNUMBER,deleted.IESYSTEMCONTROLNUMBER)
			IESYSTEMCONTROLNUMBER,COALESCE(inserted.IEPARTNUMBER,deleted.IEPARTNUMBER) IEPARTNUMBER,COALESCE(inserted.ORGCODE,deleted.ORGCODE) ORGCODE,COALESCE(inserted.IEPARTNAME,deleted.IEPARTNAME) IEPARTNAME,COALESCE(inserted.
			IESEQUENCENUMBER,deleted.IESEQUENCENUMBER) IESEQUENCENUMBER,COALESCE(inserted.BASEENGCONTROLNO,deleted.BASEENGCONTROLNO) BASEENGCONTROLNO,COALESCE(inserted.
			SECTIONNUMBER,deleted.SECTIONNUMBER) SECTIONNUMBER,COALESCE(inserted.IEPARTMODIFIER,deleted.IEPARTMODIFIER) IEPARTMODIFIER,COALESCE(inserted.IECAPTION,deleted.
			IECAPTION) IECAPTION,COALESCE(inserted.IETYPE,deleted.IETYPE) IETYPE,COALESCE(inserted.SERVICEABILITYINDICATOR,deleted.SERVICEABILITYINDICATOR) SERVICEABILITYINDICATOR,
			COALESCE(inserted.IEUPDATEDATE,deleted.IEUPDATEDATE) IEUPDATEDATE,COALESCE(inserted.IECONTROLNUMBER,deleted.IECONTROLNUMBER) IECONTROLNUMBER,COALESCE(inserted.PART,
			deleted.PART) PART,COALESCE(inserted.OFPARTS,deleted.OFPARTS) OFPARTS,COALESCE(inserted.ARRANGEMENTINDICATOR,deleted.ARRANGEMENTINDICATOR) ARRANGEMENTINDICATOR,
			COALESCE(inserted.CCRINDICATOR,deleted.CCRINDICATOR) CCRINDICATOR,COALESCE(inserted.FILTERPARTINDICATOR,deleted.FILTERPARTINDICATOR) FILTERPARTINDICATOR,COALESCE(
			inserted.MAINTPARTINDICATOR,deleted.MAINTPARTINDICATOR) MAINTPARTINDICATOR,COALESCE(inserted.NPRINDICATOR,deleted.NPRINDICATOR) NPRINDICATOR,COALESCE(inserted.
			TYPECHANGEINDICATOR,deleted.TYPECHANGEINDICATOR) TYPECHANGEINDICATOR,COALESCE(inserted.LASTMODIFIEDDATE,deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
				   INTO @MERGE_RESULTS;

			/* MERGE command */
			SELECT @MERGED_ROWS = @@ROWCOUNT;

            EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME_SIS,@CURRENT_VERSION;
            EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_EMP,@CURRENT_VERSION;

			SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
			(
				SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
				'UPDATE'
				) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
				(
					SELECT MR.ACTIONTYPE,MR.MEDIANUMBER,MR.IESYSTEMCONTROLNUMBER,MR.IEPARTNUMBER,MR.ORGCODE,MR.IEPARTNAME,MR.IESEQUENCENUMBER,MR.BASEENGCONTROLNO,MR.SECTIONNUMBER,MR.
					IEPARTMODIFIER,MR.IECAPTION,MR.IETYPE,MR.SERVICEABILITYINDICATOR,MR.IEUPDATEDATE,MR.IECONTROLNUMBER,MR.PART,MR.OFPARTS,MR.ARRANGEMENTINDICATOR,MR.CCRINDICATOR,
					MR.FILTERPARTINDICATOR,MR.MAINTPARTINDICATOR,MR.NPRINDICATOR,MR.TYPECHANGEINDICATOR,MR.LASTMODIFIEDDATE
					FROM @MERGE_RESULTS AS MR FOR JSON AUTO
				) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
			),'Modified Rows');
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
		END;

		COMMIT;

		/* STATS command */
		SET @LOGMESSAGE = 'Updating Statistics';
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = NULL;

        -- If MS does fix the stats when the table swap then uncomment the below line 

		-- UPDATE STATISTICS SISWEB_OWNER_SHADOW.LNKMEDIAIEPART WITH FULLSCAN;

		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
		THROW;
	END CATCH;
END;
GO

