
-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200514
-- Description: Sync back data from SISWEB_OWNER to SHADOW LNKIEPSID
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKPARTSIESNP_Refresh_SHADOW_Table (@DEBUG BIT = 'FALSE') 
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY

		DECLARE @MERGED_ROWS BIGINT           = 0
			   ,@PROCNAME    VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID   UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE  VARCHAR(MAX);

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE            NVARCHAR(10)
									 ,MEDIANUMBER           VARCHAR(8) NOT NULL
									 ,IESYSTEMCONTROLNUMBER VARCHAR(12) NOT NULL
									 ,SNP                   VARCHAR(10) NOT NULL
									 ,BEGINNINGRANGE        INT NOT NULL
									 ,ENDRANGE              INT NOT NULL
									 ,SNPTYPE               VARCHAR(6) NOT NULL
									 ,LASTMODIFIEDDATE      DATETIME2(6) NULL);

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		/* MERGE command */
		MERGE INTO SISWEB_OWNER_SHADOW.LNKPARTSIESNP tgt
		USING SISWEB_OWNER.LNKPARTSIESNP src
		ON src.MEDIANUMBER = tgt.MEDIANUMBER AND 
		   src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER AND 
		   src.SNP = tgt.SNP AND 
		   src.BEGINNINGRANGE = tgt.BEGINNINGRANGE AND 
		   src.ENDRANGE = tgt.ENDRANGE AND 
		   src.SNPTYPE = tgt.SNPTYPE
		-- can't happen
		--WHEN MATCHED AND EXISTS(SELECT src.PARTNUMBER
		--							  ,src.PARTNAME
		--							  ,src.QUANTITY
		--							  ,src.ENGGCHANGELEVELNO
		--							  ,src.ASSEMBLY
		--							  ,src.LESSINDICATOR
		--							  ,src.INDENTATION
		--							  ,src.isValidSerialNumber
		--							  ,src.isValidPartNumber
		--							  ,src.ID
		--							  ,src.ParentID
		--							  ,src.SNP
		--							  ,src.SNR
		--						EXCEPT
		--						SELECT tgt.PARTNUMBER
		--							  ,tgt.PARTNAME
		--							  ,tgt.QUANTITY
		--							  ,tgt.ENGGCHANGELEVELNO
		--							  ,tgt.ASSEMBLY
		--							  ,tgt.LESSINDICATOR
		--							  ,tgt.INDENTATION
		--							  ,tgt.isValidSerialNumber
		--							  ,tgt.isValidPartNumber
		--							  ,tgt.ID
		--							  ,tgt.ParentID
		--							  ,tgt.SNP
		--							  ,tgt.SNR)
		--  THEN UPDATE SET tgt.PARTNUMBER = src.PARTNUMBER
		--				 ,tgt.PARTNAME = src.PARTNAME
		--				 ,tgt.QUANTITY = src.QUANTITY
		--				 ,tgt.ENGGCHANGELEVELNO = src.ENGGCHANGELEVELNO
		--				 ,tgt.ASSEMBLY = src.ASSEMBLY
		--				 ,tgt.LESSINDICATOR = src.LESSINDICATOR
		--				 ,tgt.INDENTATION = src.INDENTATION
		--				 ,tgt.LASTMODIFIEDDATE = @SYSUTCDATETIME
		--				 ,tgt.isValidSerialNumber = src.isValidSerialNumber
		--				 ,tgt.isValidPartNumber = src.isValidPartNumber
		--				 ,tgt.ID = src.ID
		--				 ,tgt.ParentID = src.ParentID
		--				 ,tgt.SNP = src.SNP
		--				 ,tgt.SNR = src.SNR
		WHEN NOT MATCHED BY TARGET
			  THEN
			  INSERT(MEDIANUMBER,IESYSTEMCONTROLNUMBER,SNP,BEGINNINGRANGE,ENDRANGE,SNPTYPE,LASTMODIFIEDDATE)
			  VALUES (src.MEDIANUMBER,src.IESYSTEMCONTROLNUMBER,src.SNP,src.BEGINNINGRANGE,src.ENDRANGE,src.SNPTYPE,src.LASTMODIFIEDDATE) 
		WHEN NOT MATCHED BY SOURCE
			  THEN DELETE
		OUTPUT $ACTION,COALESCE(inserted.MEDIANUMBER,deleted.MEDIANUMBER) MEDIANUMBER,COALESCE(inserted.IESYSTEMCONTROLNUMBER,deleted.IESYSTEMCONTROLNUMBER) IESYSTEMCONTROLNUMBER,
		COALESCE(inserted.SNP,deleted.SNP) SNP,COALESCE(inserted.BEGINNINGRANGE,deleted.BEGINNINGRANGE) BEGINNINGRANGE,COALESCE(inserted.ENDRANGE,deleted.ENDRANGE) ENDRANGE,
		COALESCE(inserted.SNPTYPE,deleted.SNPTYPE) SNPTYPE,COALESCE(inserted.LASTMODIFIEDDATE,deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
			   INTO @MERGE_RESULTS;

		/* MERGE command */

		SELECT @MERGED_ROWS = @@ROWCOUNT;

		SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
		(
			SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'UPDATE')
			AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
			(
				SELECT MR.ACTIONTYPE,MR.MEDIANUMBER,MR.IESYSTEMCONTROLNUMBER,MR.SNP,MR.BEGINNINGRANGE,MR.ENDRANGE,MR.SNPTYPE,MR.LASTMODIFIEDDATE
				FROM @MERGE_RESULTS AS MR FOR JSON AUTO
			) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
		),'Modified Rows');
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;

		COMMIT;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
	END CATCH;
END;