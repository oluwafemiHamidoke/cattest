-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200114
-- Modify Date: 20200205	fixed deadlock error
-- Description: Conditional load from STAGING LNKIEDATE;
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKIEDATE_Insert_Update_Delete (@FORCE_LOAD BIT = 'FALSE'
																	 ,@DEBUG      BIT = 'FALSE') 
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY
		DECLARE @SCHEMANAME sysname = 'SISWEB_OWNER_STAGING'
			   ,@TABLENAME  sysname = 'LNKIEDATE';

		DECLARE @FULLTABLENAME   sysname = @SCHEMANAME + '.' + @TABLENAME
			   ,@CURRENT_VERSION BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

		DECLARE @LAST_SYNCHRONIZATION_VERSION BIGINT           = SISWEB_OWNER_STAGING._getLastSynchVersion (@FULLTABLENAME)
			   ,@RESULT                       BIT
			   ,@ROWCOUNT                     BIGINT
			   ,@MERGED_ROWS                  BIGINT           = 0
			   ,@SYSUTCDATETIME               DATETIME2(6)     = SYSUTCDATETIME()
			   ,@PROCNAME                     VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID                    UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE                   VARCHAR(MAX);

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE            NVARCHAR(10)
									 ,IESYSTEMCONTROLNUMBER VARCHAR(12) NOT NULL
									 ,DATEUPDATED           DATETIME2(0) NOT NULL
									 ,IEPUBDATE             DATETIME2(0) NOT NULL
									 ,LANGUAGEINDICATOR     VARCHAR(2) NOT NULL
									 ,IERID                 NUMERIC(16,0) NULL
									 ,LASTMODIFIEDDATE      DATETIME2(6) NULL);

/* 
	Davide 20200205 
	in order to avoid deadlocks errors like: "Transaction (Process ID 246) was deadlocked on lock | communication buffer resources with another process and has been chosen as the deadlock victim. Rerun the transaction.",
	we move the creation of temp table outside the TRANSACTION block, even if it is not extremely elegant
*/
		DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS;
		SELECT CT.SYS_CHANGE_OPERATION AS OPERATION,CT.IESYSTEMCONTROLNUMBER AS IESYSTEMCONTROLNUMBER,CT.DATEUPDATED AS DATEUPDATED,CT.IEPUBDATE AS IEPUBDATE,CT.LANGUAGEINDICATOR
		AS LANGUAGEINDICATOR, CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION
		INTO #DIFF_PRIMARY_KEYS
		FROM CHANGETABLE(CHANGES SISWEB_OWNER_STAGING.LNKIEDATE,@LAST_SYNCHRONIZATION_VERSION) AS CT;

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		IF @FORCE_LOAD = 'FALSE'
		BEGIN
			EXEC SISWEB_OWNER_STAGING._getFullOrDiff @SCHEMANAME = @SCHEMANAME,@TABLENAME = @TABLENAME,@CURRENT_VERSION = @CURRENT_VERSION,@DEBUG = @DEBUG,@RESULT = @RESULT OUTPUT
			;

			IF @DEBUG = 'TRUE'
				PRINT FORMATMESSAGE('@RESULT=%s',IIF(@RESULT = 1,'TRUE','FALSE'));

			IF @RESULT = 'TRUE'
			BEGIN
				-- 6. Obtain the changes

				IF @DEBUG = 'TRUE'
					SELECT * FROM #DIFF_PRIMARY_KEYS AS DK;

				-- 7.a Delete if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'D';
				IF @ROWCOUNT > 0
				BEGIN
					DELETE FROM SISWEB_OWNER.LNKIEDATE
					OUTPUT 'DELETE' ACTIONTYPE,DELETED.IESYSTEMCONTROLNUMBER,DELETED.DATEUPDATED,DELETED.IEPUBDATE,DELETED.LANGUAGEINDICATOR,DELETED.IERID,DELETED.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					WHERE EXISTS
					(
						SELECT *
						FROM #DIFF_PRIMARY_KEYS AS DK
						WHERE DK.IESYSTEMCONTROLNUMBER = LNKIEDATE.IESYSTEMCONTROLNUMBER AND 
							  DK.DATEUPDATED = LNKIEDATE.DATEUPDATED AND 
							  DK.IEPUBDATE = LNKIEDATE.IEPUBDATE AND 
							  DK.LANGUAGEINDICATOR = LNKIEDATE.LANGUAGEINDICATOR AND 
							  DK.OPERATION = 'D'
					);

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Deleted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.b Insert if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'I';
				IF @ROWCOUNT > 0
				BEGIN
					INSERT INTO SISWEB_OWNER.LNKIEDATE (IESYSTEMCONTROLNUMBER,DATEUPDATED,IEPUBDATE,LANGUAGEINDICATOR,IERID,LASTMODIFIEDDATE) 
					OUTPUT 'INSERT' ACTIONTYPE,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.DATEUPDATED,INSERTED.IEPUBDATE,INSERTED.LANGUAGEINDICATOR,INSERTED.IERID,INSERTED.
					LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
						   SELECT IESYSTEMCONTROLNUMBER,DATEUPDATED,IEPUBDATE,LANGUAGEINDICATOR,IERID,@SYSUTCDATETIME
						   FROM SISWEB_OWNER_STAGING.LNKIEDATE AS DT
						   WHERE EXISTS
						   (
							   SELECT *
							   FROM #DIFF_PRIMARY_KEYS AS DK
							   WHERE DK.IESYSTEMCONTROLNUMBER = DT.IESYSTEMCONTROLNUMBER AND 
									 DK.DATEUPDATED = DT.DATEUPDATED AND 
									 DK.IEPUBDATE = DT.IEPUBDATE AND 
									 DK.LANGUAGEINDICATOR = DT.LANGUAGEINDICATOR AND 
									 DK.OPERATION = 'I'
						   );

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Inserted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.c Update if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'U';
				IF @ROWCOUNT > 0
				BEGIN
					UPDATE SISWEB_OWNER.LNKIEDATE
					  SET IERID = ST.IERID,LASTMODIFIEDDATE = @SYSUTCDATETIME
					OUTPUT 'UPDATE' ACTIONTYPE,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.DATEUPDATED,INSERTED.IEPUBDATE,INSERTED.LANGUAGEINDICATOR,INSERTED.IERID,INSERTED.
					LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
					FROM SISWEB_OWNER_STAGING.LNKIEDATE AS ST
						 JOIN SISWEB_OWNER.LNKIEDATE AS TT ON ST.IESYSTEMCONTROLNUMBER = TT.IESYSTEMCONTROLNUMBER AND 
															  ST.DATEUPDATED = TT.DATEUPDATED AND 
															  ST.IEPUBDATE = TT.IEPUBDATE AND 
															  ST.LANGUAGEINDICATOR = TT.LANGUAGEINDICATOR
					WHERE EXISTS
					(
						SELECT *
						FROM #DIFF_PRIMARY_KEYS AS DK
						WHERE DK.IESYSTEMCONTROLNUMBER = ST.IESYSTEMCONTROLNUMBER AND 
							  DK.DATEUPDATED = ST.DATEUPDATED AND 
							  DK.IEPUBDATE = ST.IEPUBDATE AND 
							  DK.LANGUAGEINDICATOR = ST.LANGUAGEINDICATOR AND 
							  DK.OPERATION = 'U'
					);
					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Updated %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 8. Store current version to be used the next time
				IF @DEBUG = 'TRUE'
					SELECT * FROM @MERGE_RESULTS AS MR;

				SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
				(
					SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
					'UPDATE'
					) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
					(
						SELECT MR.ACTIONTYPE,MR.IESYSTEMCONTROLNUMBER,MR.DATEUPDATED,MR.IEPUBDATE,MR.LANGUAGEINDICATOR,MR.IERID,MR.LASTMODIFIEDDATE
						FROM @MERGE_RESULTS AS MR FOR JSON AUTO
					) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
				),'Modified Rows');
				EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
			END;
		END;

		/* to be done: handle full load with MERGE */
		IF @FORCE_LOAD = 'TRUE'
		--   OR @MODIFIED_ROWS_PERCENTAGE BETWEEN-0.10 AND 0.10
		BEGIN
			SET @LOGMESSAGE = 'Executing load: Force Load = TRUE';
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @FORCE_LOAD;

			/* MERGE command */
			MERGE INTO SISWEB_OWNER.LNKIEDATE tgt
			USING SISWEB_OWNER_STAGING.LNKIEDATE src
			ON src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER AND 
			   src.DATEUPDATED = tgt.DATEUPDATED AND 
			   src.IEPUBDATE = tgt.IEPUBDATE AND 
			   src.LANGUAGEINDICATOR = tgt.LANGUAGEINDICATOR
			WHEN MATCHED AND EXISTS
			(
				SELECT src.IERID
				EXCEPT
				SELECT tgt.IERID
			)
				  THEN UPDATE SET tgt.IERID = src.IERID,tgt.LASTMODIFIEDDATE = @SYSUTCDATETIME
			WHEN NOT MATCHED BY TARGET
				  THEN
				  INSERT(IESYSTEMCONTROLNUMBER,DATEUPDATED,IEPUBDATE,LANGUAGEINDICATOR,IERID,LASTMODIFIEDDATE)
				  VALUES (src.IESYSTEMCONTROLNUMBER,src.DATEUPDATED,src.IEPUBDATE,src.LANGUAGEINDICATOR,src.IERID,@SYSUTCDATETIME) 
			WHEN NOT MATCHED BY SOURCE
				  THEN DELETE
			OUTPUT $ACTION,COALESCE(inserted.IESYSTEMCONTROLNUMBER,deleted.IESYSTEMCONTROLNUMBER) IESYSTEMCONTROLNUMBER,COALESCE(inserted.DATEUPDATED,deleted.DATEUPDATED)
			DATEUPDATED,COALESCE(inserted.IEPUBDATE,deleted.IEPUBDATE) IEPUBDATE,COALESCE(inserted.LANGUAGEINDICATOR,deleted.LANGUAGEINDICATOR) LANGUAGEINDICATOR,COALESCE(inserted
			.IERID,deleted.IERID) IERID,COALESCE(inserted.LASTMODIFIEDDATE,deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
				   INTO @MERGE_RESULTS;

			/* MERGE command */
			SELECT @MERGED_ROWS = @@ROWCOUNT;

			

			SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
			(
				SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE =
				'UPDATE'
				) AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
				(
					SELECT MR.ACTIONTYPE,MR.IESYSTEMCONTROLNUMBER,MR.DATEUPDATED,MR.IEPUBDATE,MR.LANGUAGEINDICATOR,MR.IERID,MR.LASTMODIFIEDDATE
					FROM @MERGE_RESULTS AS MR FOR JSON AUTO
				) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
			),'Modified Rows');
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
		END;

        EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Upsert the mock IE dates for EMP IEs',@DATAVALUE = NULL;
		-- Upsert the mock IE dates for EMP IEs
		MERGE INTO SISWEB_OWNER.LNKIEDATE tgt
			USING (
				SELECT DISTINCT [IESYSTEMCONTROLNUMBER],[IEUPDATEDATE] DATEUPDATED,[IEUPDATEDATE] IEPUBDATE,'E' LANGUAGEINDICATOR,NULL IERID,[LASTMODIFIEDDATE] FROM [EMP_STAGING].[LNKMEDIAIEPART]
			) src
			ON src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER 
			WHEN MATCHED AND EXISTS
			(
				SELECT src.DATEUPDATED
				EXCEPT
				SELECT tgt.DATEUPDATED
			)
				  THEN UPDATE SET tgt.DATEUPDATED = src.DATEUPDATED,tgt.LASTMODIFIEDDATE = @SYSUTCDATETIME
			WHEN NOT MATCHED BY TARGET
				  THEN
				  INSERT(IESYSTEMCONTROLNUMBER,DATEUPDATED,IEPUBDATE,LANGUAGEINDICATOR,IERID,LASTMODIFIEDDATE)
				  VALUES (src.IESYSTEMCONTROLNUMBER,src.DATEUPDATED,src.IEPUBDATE,src.LANGUAGEINDICATOR,src.IERID,@SYSUTCDATETIME);

        EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME,@CURRENT_VERSION;

        SET @LOGMESSAGE = FORMATMESSAGE('Version before running sproc: %s and after running sproc %s', CAST(@CURRENT_VERSION  as varchar(max)),  CAST(CHANGE_TRACKING_CURRENT_VERSION() as varchar(max)));
        EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = NULL;

		COMMIT;

		UPDATE STATISTICS SISWEB_OWNER.LNKIEDATE WITH FULLSCAN;

		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
	END CATCH;
END;
GO