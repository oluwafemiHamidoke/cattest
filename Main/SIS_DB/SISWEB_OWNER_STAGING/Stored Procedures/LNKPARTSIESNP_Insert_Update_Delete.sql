-- =============================================
-- Author:      Davide Moraschi
-- Create Date: 20200120
-- Modify Date: 20200123	refatored LASTMODIFIEDDATE
-- Modify Date: 20200205	fixed deadlock error
-- Modify Date: 20200513	modified to populate SHADOW table
-- Modify Date: 20201120 - Davide: added UPDATE STATS see: https://dev.azure.com/sis-cat-com/devops-infra/_workitems/edit/86007
-- Description: Conditional load from STAGING LNKPARTSIESNP
-- =============================================
CREATE PROCEDURE SISWEB_OWNER_STAGING.LNKPARTSIESNP_Insert_Update_Delete (@FORCE_LOAD BIT = 'FALSE'
																		,@DEBUG      BIT = 'FALSE') 
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY
		DECLARE @SCHEMANAME_SIS sysname = 'SISWEB_OWNER_STAGING'
               ,@SCHEMANAME_EMP sysname = 'EMP_STAGING'
			   ,@TABLENAME  sysname = 'LNKPARTSIESNP';

		DECLARE @FULLTABLENAME_SIS   sysname = @SCHEMANAME_SIS + '.' + @TABLENAME
               ,@FULLTABLENAME_EMP   sysname = @SCHEMANAME_EMP + '.' + @TABLENAME
			   ,@CURRENT_VERSION BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

		DECLARE @LAST_SYNCHRONIZATION_VERSION_SIS BIGINT           = SISWEB_OWNER_STAGING._getLastSynchVersion (@FULLTABLENAME_SIS)
               ,@LAST_SYNCHRONIZATION_VERSION_EMP BIGINT           = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_EMP)
			   ,@RESULT                       BIT
			   ,@ROWCOUNT                     BIGINT
			   ,@MERGED_ROWS                  BIGINT           = 0
			   ,@SYSUTCDATETIME               DATETIME2(6)     = SYSUTCDATETIME()
			   ,@PROCNAME                     VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID                    UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE                   VARCHAR(MAX);

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE            NVARCHAR(10)
									 ,MEDIANUMBER           VARCHAR(8) NOT NULL
									 ,IESYSTEMCONTROLNUMBER VARCHAR(12) NOT NULL
									 ,SNP                   VARCHAR(10) NOT NULL
									 ,BEGINNINGRANGE        INT NOT NULL
									 ,ENDRANGE              INT NOT NULL
									 ,SNPTYPE               VARCHAR(6) NOT NULL
									 ,LASTMODIFIEDDATE      DATETIME2(6) NULL);

/* 
	Davide 20200205 
	in order to avoid deadlocks errors like: "Transaction (Process ID 246) was deadlocked on lock | communication buffer resources with another process and has been chosen as the deadlock victim. Rerun the transaction.",
	we move the creation of temp table outside the TRANSACTION block, even if it is not extremely elegant
*/

        DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS;
        SELECT * INTO #DIFF_PRIMARY_KEYS
        FROM (
		    SELECT CT.SYS_CHANGE_OPERATION AS OPERATION, CT.MEDIANUMBER AS MEDIANUMBER, CT.IESYSTEMCONTROLNUMBER AS IESYSTEMCONTROLNUMBER,
		    CT.SNP AS SNP,CT.BEGINNINGRANGE AS BEGINNINGRANGE, CT.ENDRANGE AS ENDRANGE, CT.SNPTYPE AS SNPTYPE,
		    CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION
		    FROM CHANGETABLE(CHANGES [EMP_STAGING].[LNKPARTSIESNP], @LAST_SYNCHRONIZATION_VERSION_EMP) as CT

            UNION

		    SELECT CT.SYS_CHANGE_OPERATION AS OPERATION, CT.MEDIANUMBER AS MEDIANUMBER, CT.IESYSTEMCONTROLNUMBER AS IESYSTEMCONTROLNUMBER,
		    CT.SNP AS SNP,CT.BEGINNINGRANGE AS BEGINNINGRANGE, CT.ENDRANGE AS ENDRANGE, CT.SNPTYPE AS SNPTYPE,
		    CT.SYS_CHANGE_VERSION AS SYS_CHANGE_VERSION
		    FROM CHANGETABLE(CHANGES [SISWEB_OWNER_STAGING].[LNKPARTSIESNP], @LAST_SYNCHRONIZATION_VERSION_SIS) as CT
		    ) AS DIFF;

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		IF @FORCE_LOAD = 'FALSE'
		BEGIN
			EXEC SISWEB_OWNER_STAGING._getFullOrDiffWithEMP @TABLENAME = @TABLENAME, @CURRENT_VERSION = @CURRENT_VERSION, @DEBUG = @DEBUG,@RESULT = @RESULT OUTPUT
			;

			IF @DEBUG = 'TRUE'
				PRINT FORMATMESSAGE('@RESULT=%s',IIF(@RESULT = 1,'TRUE','FALSE'));

			IF @RESULT = 'TRUE'
			BEGIN
				-- 6. Obtain the changes

				IF @DEBUG = 'TRUE'
					SELECT * FROM #DIFF_PRIMARY_KEYS AS DK;

				-- 7.a Delete if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'D';
				IF @ROWCOUNT > 0
				BEGIN
					DELETE FROM SISWEB_OWNER_SHADOW.LNKPARTSIESNP
					OUTPUT 'DELETE' ACTIONTYPE, DELETED.MEDIANUMBER, DELETED.IESYSTEMCONTROLNUMBER, DELETED.SNP, DELETED.BEGINNINGRANGE,
					 DELETED.ENDRANGE, DELETED.SNPTYPE, DELETED.LASTMODIFIEDDATE
				    INTO @MERGE_RESULTS
					WHERE EXISTS
					(
						SELECT *
						FROM #DIFF_PRIMARY_KEYS AS DK
						WHERE DK.MEDIANUMBER = LNKPARTSIESNP.MEDIANUMBER AND 
							  DK.IESYSTEMCONTROLNUMBER = LNKPARTSIESNP.IESYSTEMCONTROLNUMBER AND 
							  DK.SNP = LNKPARTSIESNP.SNP AND 
							  DK.BEGINNINGRANGE = LNKPARTSIESNP.BEGINNINGRANGE AND 
							  DK.ENDRANGE = LNKPARTSIESNP.ENDRANGE AND 
							  DK.SNPTYPE = LNKPARTSIESNP.SNPTYPE AND 
							  DK.OPERATION = 'D'
					);

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Deleted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

				-- 7.b Insert if needed
				SELECT @ROWCOUNT = COUNT(*) FROM #DIFF_PRIMARY_KEYS AS DK WHERE DK.OPERATION = 'I';
				IF @ROWCOUNT > 0
				BEGIN
					INSERT INTO SISWEB_OWNER_SHADOW.LNKPARTSIESNP (MEDIANUMBER,IESYSTEMCONTROLNUMBER,SNP,BEGINNINGRANGE,ENDRANGE,SNPTYPE,LASTMODIFIEDDATE) 
					OUTPUT 'INSERT' ACTIONTYPE,INSERTED.MEDIANUMBER,INSERTED.IESYSTEMCONTROLNUMBER,INSERTED.SNP,INSERTED.BEGINNINGRANGE,INSERTED.ENDRANGE,INSERTED.SNPTYPE,INSERTED
					.LASTMODIFIEDDATE
						   INTO @MERGE_RESULTS
						   SELECT MEDIANUMBER,IESYSTEMCONTROLNUMBER,SNP,BEGINNINGRANGE,ENDRANGE,SNPTYPE,@SYSUTCDATETIME
						   FROM SISWEB_OWNER_STAGING.LNKPARTSIESNP AS DT
						   WHERE EXISTS
						   (
							   SELECT *
							   FROM #DIFF_PRIMARY_KEYS AS DK
							   WHERE DK.MEDIANUMBER = DT.MEDIANUMBER AND 
									 DK.IESYSTEMCONTROLNUMBER = DT.IESYSTEMCONTROLNUMBER AND 
									 DK.SNP = DT.SNP AND 
									 DK.BEGINNINGRANGE = DT.BEGINNINGRANGE AND 
									 DK.ENDRANGE = DT.ENDRANGE AND 
									 DK.SNPTYPE = DT.SNPTYPE AND 
									 DK.OPERATION = 'I'
						   );

					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Inserted %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
				END;

/*				-- cant' happen, all columns in PK
				-- 7.c Update if needed
				SELECT @ROWCOUNT = COUNT(*)
				  FROM #DIFF_PRIMARY_KEYS AS DK
				  WHERE
						DK.OPERATION = 'U'-- not needed all columns in PK
						--AND -- if the modified column is LASTMODIFIEDDATE ignore the update 
						--DK.SYS_CHANGE_COLUMNS <> 0x000000000A000000;
				IF @ROWCOUNT > 0
				BEGIN
					UPDATE SISWEB_OWNER_SHADOW.LNKPARTSIESNP
						   SET PARTNUMBER = ST.PARTNUMBER
							  ,PARTNAME = ST.PARTNAME
							  ,QUANTITY = ST.QUANTITY
							  ,ENGGCHANGELEVELNO = ST.ENGGCHANGELEVELNO
							  ,ASSEMBLY = ST.ASSEMBLY
							  ,LESSINDICATOR = ST.LESSINDICATOR
							  ,INDENTATION = ST.INDENTATION
							  ,LASTMODIFIEDDATE = @SYSUTCDATETIME
							  ,isValidSerialNumber = ST.isValidSerialNumber
							  ,isValidPartNumber = ST.isValidPartNumber
							  ,ID = ST.ID
							  ,ParentID = ST.ParentID
							  ,SNP = ST.SNP
							  ,SNR = ST.SNR
					OUTPUT 'UPDATE' ACTIONTYPE
						  ,INSERTED.SERIALNUMBER
						  ,INSERTED.PARTSEQUENCENUMBER
						  ,INSERTED.PARTNUMBER
						  ,INSERTED.PARTNAME
						  ,INSERTED.QUANTITY
						  ,INSERTED.ENGGCHANGELEVELNO
						  ,INSERTED.ASSEMBLY
						  ,INSERTED.LESSINDICATOR
						  ,INSERTED.INDENTATION
						  ,INSERTED.LASTMODIFIEDDATE
						  ,INSERTED.isValidSerialNumber
						  ,INSERTED.isValidPartNumber
						  ,INSERTED.ID
						  ,INSERTED.ParentID
						  ,INSERTED.SNP
						  ,INSERTED.SNR
						   INTO @MERGE_RESULTS
					  FROM SISWEB_OWNER_STAGING.LNKPARTSIESNP AS ST
						   JOIN SISWEB_OWNER_SHADOW.LNKPARTSIESNP AS TT ON
																	ST.SERIALNUMBER = TT.SERIALNUMBER
																	AND ST.PARTSEQUENCENUMBER = TT.PARTSEQUENCENUMBER
					  WHERE EXISTS(SELECT *
									 FROM #DIFF_PRIMARY_KEYS AS DK
									 WHERE
										   DK.SERIALNUMBER = ST.SERIALNUMBER
										   AND DK.PARTSEQUENCENUMBER = ST.PARTSEQUENCENUMBER
										   AND DK.OPERATION = 'U');
					SELECT @MERGED_ROWS = @@ROWCOUNT;

					SET @LOGMESSAGE = FORMATMESSAGE('Updated %s rows',CAST(@MERGED_ROWS AS VARCHAR(9)));
					EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID
										   ,@LOGTYPE = 'Information'
										   ,@NAMEOFSPROC = @PROCNAME
										   ,@LOGMESSAGE = @LOGMESSAGE
										   ,@DATAVALUE = @MERGED_ROWS;
				END;
*/

				-- 8. Store current version to be used the next time
				IF @DEBUG = 'TRUE'
					SELECT * FROM @MERGE_RESULTS AS MR;

				EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME_SIS, @CURRENT_VERSION;
				EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_EMP, @CURRENT_VERSION;

				SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
				(
					SELECT (SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,
					    (SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'UPDATE') AS Updated,
					    (SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
					    (SELECT MR.ACTIONTYPE, MR.MEDIANUMBER, MR.IESYSTEMCONTROLNUMBER, MR.SNP, MR.BEGINNINGRANGE, MR.ENDRANGE,
					        MR.SNPTYPE,MR.LASTMODIFIEDDATE
					     FROM @MERGE_RESULTS AS MR FOR JSON AUTO) AS Modified_Rows FOR JSON PATH, WITHOUT_ARRAY_WRAPPER
				), 'Modified Rows');
				EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
			END;
		END;

		/* to be done: handle full load with MERGE */
		IF @FORCE_LOAD = 'TRUE'
		--   OR @MODIFIED_ROWS_PERCENTAGE BETWEEN-0.10 AND 0.10
		BEGIN
			SET @LOGMESSAGE = 'Executing load: Force Load = TRUE';
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @FORCE_LOAD;

			/* MERGE command */
			MERGE INTO SISWEB_OWNER_SHADOW.LNKPARTSIESNP tgt
		    USING (SELECT [MEDIANUMBER], [IESYSTEMCONTROLNUMBER], [SNP], [BEGINNINGRANGE], [ENDRANGE], [SNPTYPE], [LASTMODIFIEDDATE]
    			   FROM [SISWEB_OWNER_STAGING].[LNKPARTSIESNP]
    			   UNION ALL
                   SELECT [MEDIANUMBER], [IESYSTEMCONTROLNUMBER], [SNP], [BEGINNINGRANGE], [ENDRANGE], [SNPTYPE], [LASTMODIFIEDDATE]
                   FROM [EMP_STAGING].[LNKPARTSIESNP] ) src
			ON src.MEDIANUMBER = tgt.MEDIANUMBER AND 
			   src.IESYSTEMCONTROLNUMBER = tgt.IESYSTEMCONTROLNUMBER AND 
			   src.SNP = tgt.SNP AND 
			   src.BEGINNINGRANGE = tgt.BEGINNINGRANGE AND 
			   src.ENDRANGE = tgt.ENDRANGE AND 
			   src.SNPTYPE = tgt.SNPTYPE
			-- can't happen
			--WHEN MATCHED AND EXISTS(SELECT src.PARTNUMBER
			--							  ,src.PARTNAME
			--							  ,src.QUANTITY
			--							  ,src.ENGGCHANGELEVELNO
			--							  ,src.ASSEMBLY
			--							  ,src.LESSINDICATOR
			--							  ,src.INDENTATION
			--							  ,src.isValidSerialNumber
			--							  ,src.isValidPartNumber
			--							  ,src.ID
			--							  ,src.ParentID
			--							  ,src.SNP
			--							  ,src.SNR
			--						EXCEPT
			--						SELECT tgt.PARTNUMBER
			--							  ,tgt.PARTNAME
			--							  ,tgt.QUANTITY
			--							  ,tgt.ENGGCHANGELEVELNO
			--							  ,tgt.ASSEMBLY
			--							  ,tgt.LESSINDICATOR
			--							  ,tgt.INDENTATION
			--							  ,tgt.isValidSerialNumber
			--							  ,tgt.isValidPartNumber
			--							  ,tgt.ID
			--							  ,tgt.ParentID
			--							  ,tgt.SNP
			--							  ,tgt.SNR)
			--  THEN UPDATE SET tgt.PARTNUMBER = src.PARTNUMBER
			--				 ,tgt.PARTNAME = src.PARTNAME
			--				 ,tgt.QUANTITY = src.QUANTITY
			--				 ,tgt.ENGGCHANGELEVELNO = src.ENGGCHANGELEVELNO
			--				 ,tgt.ASSEMBLY = src.ASSEMBLY
			--				 ,tgt.LESSINDICATOR = src.LESSINDICATOR
			--				 ,tgt.INDENTATION = src.INDENTATION
			--				 ,tgt.LASTMODIFIEDDATE = @SYSUTCDATETIME
			--				 ,tgt.isValidSerialNumber = src.isValidSerialNumber
			--				 ,tgt.isValidPartNumber = src.isValidPartNumber
			--				 ,tgt.ID = src.ID
			--				 ,tgt.ParentID = src.ParentID
			--				 ,tgt.SNP = src.SNP
			--				 ,tgt.SNR = src.SNR
			WHEN NOT MATCHED BY TARGET
				  THEN
				  INSERT(MEDIANUMBER, IESYSTEMCONTROLNUMBER, SNP, BEGINNINGRANGE, ENDRANGE, SNPTYPE, LASTMODIFIEDDATE)
				  VALUES (src.MEDIANUMBER, src.IESYSTEMCONTROLNUMBER, src.SNP, src.BEGINNINGRANGE, src.ENDRANGE, src.SNPTYPE, @SYSUTCDATETIME)
			WHEN NOT MATCHED BY SOURCE
				  THEN DELETE
			OUTPUT $ACTION, COALESCE(inserted.MEDIANUMBER, deleted.MEDIANUMBER) MEDIANUMBER,
			    COALESCE(inserted.IESYSTEMCONTROLNUMBER, deleted.IESYSTEMCONTROLNUMBER) IESYSTEMCONTROLNUMBER,
			    COALESCE(inserted.SNP, deleted.SNP) SNP, COALESCE(inserted.BEGINNINGRANGE, deleted.BEGINNINGRANGE) BEGINNINGRANGE,
			    COALESCE(inserted.ENDRANGE, deleted.ENDRANGE) ENDRANGE, COALESCE(inserted.SNPTYPE, deleted.SNPTYPE) SNPTYPE,
			    COALESCE(inserted.LASTMODIFIEDDATE, deleted.LASTMODIFIEDDATE) LASTMODIFIEDDATE
				INTO @MERGE_RESULTS;

			/* MERGE command */
			SELECT @MERGED_ROWS = @@ROWCOUNT;

			EXEC SISWEB_OWNER_STAGING._setLastSynchVersion @FULLTABLENAME_SIS, @CURRENT_VERSION;
			EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_EMP, @CURRENT_VERSION;

			SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
			(
				SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,
				    (SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'UPDATE') AS Updated,
				    (SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
				    (SELECT MR.ACTIONTYPE, MR.MEDIANUMBER, MR.IESYSTEMCONTROLNUMBER, MR.SNP, MR.BEGINNINGRANGE, MR.ENDRANGE, MR.SNPTYPE, MR.LASTMODIFIEDDATE
					    FROM @MERGE_RESULTS AS MR FOR JSON AUTO ) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
			),'Modified Rows');
			EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;
		END;

		COMMIT;

		/* STATS command */
		SET @LOGMESSAGE = 'Updating Statistics';
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = NULL;
      
	    -- If MS does fix the stats when the table swap then uncomment the below line 

		-- UPDATE STATISTICS SISWEB_OWNER_SHADOW.LNKPARTSIESNP WITH FULLSCAN;

		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
		THROW;
	END CATCH;
END;
GO

