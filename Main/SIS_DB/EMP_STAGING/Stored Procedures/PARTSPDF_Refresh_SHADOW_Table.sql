CREATE PROCEDURE EMP_STAGING.PARTSPDF_Refresh_SHADOW_Table (@DEBUG BIT = 'FALSE')
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL SNAPSHOT;
	SET XACT_ABORT,NOCOUNT ON;
	BEGIN TRY

		DECLARE @MERGED_ROWS BIGINT           = 0
			   ,@PROCNAME    VARCHAR(200)     = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID)
			   ,@PROCESSID   UNIQUEIDENTIFIER = NEWID()
			   ,@LOGMESSAGE  VARCHAR(MAX);

		DECLARE @MERGE_RESULTS TABLE (ACTIONTYPE            NVARCHAR(10)
									 ,PARTSPDF_ID           INT                    NOT NULL
                                     ,MEDIANUMBER           VARCHAR (8)            NOT NULL
									 ,PDFNUMBER             VARCHAR (60)           NOT NULL
									 ,PDFFILENAME           VARCHAR (60)           NOT NULL
									 ,PDFTYPE               VARCHAR (30)           NOT NULL
									 ,REVISION              INT                    NOT NULL
									 ,LANGUAGEINDICATOR     VARCHAR (2)            NOT NULL
                                     ,FILEPATH              VARCHAR (512)          NOT NULL
                                     ,FILESIZE              INT                    NOT NULL);

		BEGIN TRANSACTION;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution started',@DATAVALUE = NULL;

		/* MERGE command */
		MERGE INTO SISWEB_OWNER_SHADOW.PARTSPDF tgt
		USING SISWEB_OWNER.PARTSPDF src
		ON src.PARTSPDF_ID = tgt.PARTSPDF_ID
		WHEN MATCHED AND EXISTS
		(
			SELECT src.MEDIANUMBER,src.PDFNUMBER,src.PDFFILENAME,src.PDFTYPE,src.REVISION,src.LANGUAGEINDICATOR,src.FILEPATH,src.FILESIZE,src.LASTMODIFIEDDATE
			EXCEPT
			SELECT tgt.MEDIANUMBER,tgt.PDFNUMBER,tgt.PDFFILENAME,tgt.PDFTYPE,tgt.REVISION,tgt.LANGUAGEINDICATOR,tgt.FILEPATH,tgt.FILESIZE,tgt.LASTMODIFIEDDATE
		)
			  THEN UPDATE SET tgt.MEDIANUMBER = src.MEDIANUMBER,tgt.PDFNUMBER = src.PDFNUMBER,tgt.PDFFILENAME = src.PDFFILENAME,tgt.PDFTYPE = src.PDFTYPE,
			      tgt.REVISION = src.REVISION,tgt.LANGUAGEINDICATOR = src.LANGUAGEINDICATOR,tgt.FILEPATH = src.FILEPATH,tgt.FILESIZE = src.FILESIZE, tgt.LASTMODIFIEDDATE = src.LASTMODIFIEDDATE
		WHEN NOT MATCHED BY TARGET
			  THEN
			  INSERT(PARTSPDF_ID,MEDIANUMBER,PDFNUMBER,PDFFILENAME,PDFTYPE,REVISION,LANGUAGEINDICATOR,FILEPATH,FILESIZE,LASTMODIFIEDDATE)
			  VALUES (src.PARTSPDF_ID,src.MEDIANUMBER,src.PDFNUMBER,src.PDFFILENAME,src.PDFTYPE,src.REVISION,src.LANGUAGEINDICATOR,src.FILEPATH,src.FILESIZE,SYSDATETIME())
		WHEN NOT MATCHED BY SOURCE
			  THEN DELETE
		OUTPUT $ACTION,COALESCE(inserted.PARTSPDF_ID,deleted.PARTSPDF_ID) PARTSPDF_ID,COALESCE(inserted.MEDIANUMBER,deleted.MEDIANUMBER)
		MEDIANUMBER,COALESCE(inserted.PDFNUMBER,deleted.PDFNUMBER) PDFNUMBER,COALESCE(inserted.PDFFILENAME,deleted.PDFFILENAME) PDFFILENAME,COALESCE(inserted.PDFTYPE,deleted.
		PDFTYPE) PDFTYPE,COALESCE(inserted.REVISION,deleted.REVISION) REVISION,COALESCE(inserted.LANGUAGEINDICATOR,deleted.LANGUAGEINDICATOR) LANGUAGEINDICATOR,COALESCE(inserted.FILEPATH,deleted.FILEPATH)
        FILEPATH,COALESCE(inserted.FILESIZE,deleted.FILESIZE) FILESIZE

        INTO @MERGE_RESULTS;

		/* MERGE command */
		SELECT @MERGED_ROWS = @@ROWCOUNT;

		SET @LOGMESSAGE = IIF(@DEBUG = 'TRUE',
		(
			SELECT(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'INSERT') AS Inserted,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'UPDATE')
			AS Updated,(SELECT COUNT(*) FROM @MERGE_RESULTS AS MR WHERE MR.ACTIONTYPE = 'DELETE') AS Deleted,
			(
				SELECT MR.ACTIONTYPE,MR.PARTSPDF_ID,MR.MEDIANUMBER,MR.PDFNUMBER,MR.PDFFILENAME,MR.PDFTYPE,MR.REVISION,MR.LANGUAGEINDICATOR,MR.FILEPATH,MR.FILESIZE
				FROM @MERGE_RESULTS AS MR FOR JSON AUTO
			) AS Modified_Rows FOR JSON PATH,WITHOUT_ARRAY_WRAPPER
		),'Modified Rows');
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @MERGED_ROWS;

		COMMIT;
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Information',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
	END TRY
	BEGIN CATCH
		DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE()
			   ,@ERRORLINE    INT            = ERROR_LINE()
			   ,@ERRORNUM     INT            = ERROR_NUMBER();
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
		EXEC sis_stage.WriteLog @PROCESSID = @PROCESSID,@LOGTYPE = 'Error',@NAMEOFSPROC = @PROCNAME,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
	END CATCH;
END;