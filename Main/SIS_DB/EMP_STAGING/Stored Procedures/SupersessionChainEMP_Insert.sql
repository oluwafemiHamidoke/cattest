CREATE PROCEDURE [EMP_STAGING].[SupersessionChainEMP_Insert]
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @WBMLOADACTION  NVARCHAR (128) = 'DEFAULT',
            @ORGCODE_SEPARATOR VARCHAR(1) = SISWEB_OWNER_STAGING._getDefaultORGCODESeparator();

    if OBJECT_ID('tempdb..#RecursivePartNumbers') is not null
        Drop table #RecursivePartNumbers

    if OBJECT_ID('tempdb..#PartNumberForForwardChain') is not null
        Drop table #PartNumberForForwardChain

    if OBJECT_ID('tempdb..#PartNumberForBackwardChain') is not null
        Drop table #PartNumberForBackwardChain

    if OBJECT_ID('tempdb..#PartNumberWithOnlyBackwardChain') is not null
        Drop table #PartNumberWithOnlyBackwardChain

    if OBJECT_ID('tempdb..#Chain') is not null
        Drop table #Chain

    ---avoiding the loop
    SELECT A.PARTNUMBER INTO #RecursivePartNumbers
    FROM [EMP_STAGING].[SCSUPERSEDEDPART] A
        JOIN [EMP_STAGING].[SCSUPERSEDEDPART] B
    ON A.PARTNUMBER  = B.REPLACEMENTPARTNUMBER AND
        A.ORGCODE = B.REPLACEMENTORGCODE AND
        B.PARTNUMBER  = A.REPLACEMENTPARTNUMBER AND
        B.ORGCODE = A.REPLACEMENTORGCODE;

    SELECT A.PARTNUMBER, A.ORGCODE, B.REPLACEMENTPARTNUMBER, B.REPLACEMENTORGCODE INTO #PartNumberForForwardChain
    FROM [EMP_STAGING].[SCPART] A INNER JOIN [EMP_STAGING].[SCSUPERSEDEDPART] B
    ON B.PARTNUMBER = A.PARTNUMBER AND
        B.ORGCODE    = A.ORGCODE
    WHERE B.PARTNUMBER IS NOT NULL AND A.WBMLOADACTION = @WBMLOADACTION AND B.WBMLOADACTION = @WBMLOADACTION;

    SELECT A.PARTNUMBER, A.ORGCODE INTO #PartNumberForBackwardChain
    FROM [EMP_STAGING].[SCPART] A INNER JOIN [EMP_STAGING].[SCSUPERSEDEDPART] B
    ON B.REPLACEMENTPARTNUMBER = A.PARTNUMBER AND
        B.REPLACEMENTORGCODE    = A.ORGCODE
    WHERE A.PARTNUMBER IS NOT NULL AND A.WBMLOADACTION = @WBMLOADACTION AND B.WBMLOADACTION = @WBMLOADACTION;;

    WITH forwardChainsCTE AS (
        SELECT
            PARTNUMBER as STARTPARTNUMBER,
            ORGCODE as STARTORGCODE,
            PARTNUMBER,
            ORGCODE,
            REPLACEMENTPARTNUMBER as LASTPARTNUMBER,
            REPLACEMENTORGCODE AS LASTORGCODE,
            CAST(CONCAT(main.PARTNUMBER,@ORGCODE_SEPARATOR, main.ORGCODE, '|', main.REPLACEMENTPARTNUMBER,@ORGCODE_SEPARATOR, main.REPLACEMENTORGCODE) AS VARCHAR(8000)) as chain
        FROM
            #PartNumberForForwardChain main
        WHERE  PARTNUMBER NOT IN (select PARTNUMBER from #RecursivePartNumbers)
        UNION ALL
        SELECT
            c.STARTPARTNUMBER,
            c.STARTORGCODE,
            sub.PARTNUMBER,
            sub.ORGCODE,
            sub.REPLACEMENTPARTNUMBER,
            sub.REPLACEMENTORGCODE,
            CONCAT(c.chain, '|', sub.REPLACEMENTPARTNUMBER,@ORGCODE_SEPARATOR, sub.REPLACEMENTORGCODE)
        FROM
        [EMP_STAGING].[SCSUPERSEDEDPART] sub
        inner join forwardChainsCTE c on
        sub.PARTNUMBER=c.LASTPARTNUMBER and sub.ORGCODE=c.LASTORGCODE WHERE sub.WBMLOADACTION = @WBMLOADACTION AND
        sub.PARTNUMBER NOT IN (select PARTNUMBER from #RecursivePartNumbers)
        )
    SELECT STARTPARTNUMBER as PARTNUMBER, STARTORGCODE as ORGCODE, LASTPARTNUMBER, LASTORGCODE, chain into #Chain  from forwardChainsCTE cte
    WHERE NOT EXISTS  (select * from [EMP_STAGING].[SCSUPERSEDEDPART] where PARTNUMBER = cte.LASTPARTNUMBER and ORGCODE = cte.LASTORGCODE AND WBMLOADACTION = @WBMLOADACTION);

    CREATE INDEX IX_CHAIN ON #Chain(PARTNUMBER, ORGCODE);
    CREATE INDEX IX_PARTNUMBERWITHBACKWARDCHAIN ON #PartNumberForBackwardChain(PARTNUMBER, ORGCODE);

    WITH backwardChainsCTE AS (
        SELECT
            PARTNUMBER as STARTPARTNUMBER,
            ORGCODE as STARTORGCODE,
            LASTPARTNUMBER AS ENDPARTNUMBER,
            LASTORGCODE as ENDORGCODE,
            PARTNUMBER,
            ORGCODE,
            LASTPARTNUMBER,
            LASTORGCODE,
            CHAIN
        FROM
            #Chain main
        UNION ALL
        SELECT
            c.STARTPARTNUMBER,
            c.STARTORGCODE,
            c.ENDPARTNUMBER,
            c.ENDORGCODE,
            sub.PARTNUMBER,
            sub.ORGCODE,
            sub.REPLACEMENTPARTNUMBER,
            sub.REPLACEMENTORGCODE,
            CONCAT(sub.PARTNUMBER, @ORGCODE_SEPARATOR, sub.ORGCODE, '|', c.CHAIN)
        FROM
        [EMP_STAGING].[SCSUPERSEDEDPART] sub
        inner join backwardChainsCTE c on
        sub.REPLACEMENTPARTNUMBER=c.PARTNUMBER and sub.REPLACEMENTORGCODE=c.ORGCODE WHERE sub.WBMLOADACTION = @WBMLOADACTION AND
        sub.PARTNUMBER NOT IN (select PARTNUMBER from #RecursivePartNumbers)
    )
    INSERT INTO [EMP_STAGING].[SUPERSESSIONCHAINS]
    SELECT STARTPARTNUMBER, STARTORGCODE, ENDPARTNUMBER, ENDORGCODE, CHAIN FROM backwardChainsCTE cte
    WHERE NOT EXISTS (select * from [EMP_STAGING].[SCSUPERSEDEDPART] WHERE REPLACEMENTPARTNUMBER=cte.PARTNUMBER and REPLACEMENTORGCODE=cte.ORGCODE AND WBMLOADACTION = @WBMLOADACTION);

    CREATE INDEX IX_PARTNUMBERFORBACKWARDCHAIN ON #PartNumberForBackwardChain(PARTNUMBER, ORGCODE);


    SELECT * INTO #PartNumberWithOnlyBackwardChain FROM (select  PARTNUMBER, ORGCODE from #PartNumberForBackwardChain EXCEPT
                                                         SELECT  PARTNUMBER, ORGCODE from #Chain) A

    CREATE INDEX IX_PARTNUMBERWITHONLYBACKWARDCHAIN ON #PartNumberWithOnlyBackwardChain(PARTNUMBER, ORGCODE);

    WITH backwardChainsOnlyCTE AS (
        SELECT
            PARTNUMBER as STARTPARTNUMBER,
            ORGCODE as STARTORGCODE,
            PARTNUMBER,
            ORGCODE,
            PARTNUMBER as REPLACEMENTPARTNUMBER,
            ORGCODE as REPLACEMENTORGCODE,
            CAST(CONCAT(main.PARTNUMBER,@ORGCODE_SEPARATOR, main.ORGCODE) AS VARCHAR(8000)) as chain
        FROM
            #PartNumberWithOnlyBackwardChain main
        UNION ALL
        SELECT
            c.STARTPARTNUMBER,
            c.STARTORGCODE,
            sub.PARTNUMBER,
            sub.ORGCODE,
            sub.REPLACEMENTPARTNUMBER,
            sub.REPLACEMENTORGCODE,
            CONCAT(sub.PARTNUMBER, @ORGCODE_SEPARATOR, sub.ORGCODE, '|', c.CHAIN)
        FROM
        [EMP_STAGING].[SCSUPERSEDEDPART] sub
        inner join backwardChainsOnlyCTE c on
        sub.REPLACEMENTPARTNUMBER=c.PARTNUMBER and sub.REPLACEMENTORGCODE=c.ORGCODE WHERE sub.WBMLOADACTION = @WBMLOADACTION AND
        sub.PARTNUMBER NOT IN (select PARTNUMBER from #RecursivePartNumbers)
    )
    INSERT INTO [EMP_STAGING].[SUPERSESSIONCHAINS]
    SELECT STARTPARTNUMBER, STARTORGCODE, STARTPARTNUMBER, STARTORGCODE, chain FROM backwardChainsOnlyCTE cte
    WHERE NOT EXISTS (select * from [EMP_STAGING].[SCSUPERSEDEDPART] WHERE REPLACEMENTPARTNUMBER=cte.PARTNUMBER and REPLACEMENTORGCODE=cte.ORGCODE AND WBMLOADACTION = @WBMLOADACTION);
END
