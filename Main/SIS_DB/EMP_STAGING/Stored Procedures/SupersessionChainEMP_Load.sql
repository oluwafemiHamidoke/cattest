CREATE PROCEDURE [EMP_STAGING].[SupersessionChainEMP_Load]
AS
BEGIN
   SET XACT_ABORT,NOCOUNT ON;
    BEGIN TRY

        Declare @ProcName VARCHAR(200) = OBJECT_SCHEMA_NAME(@@PROCID)+'.'+OBJECT_NAME(@@PROCID),
                @ProcessID uniqueidentifier = NewID(),
                @LOGMESSAGE  VARCHAR(MAX);


        DECLARE @FULLTABLENAME_FOR_SCPART             sysname = 'EMP_STAGING.SCPART'
               ,@FULLTABLENAME_FOR_SCSUPERSEDEDPART   sysname = 'EMP_STAGING.SCSUPERSEDEDPART'
               ,@CURRENT_VERSION                      BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

        DECLARE @LAST_SYNCHRONIZATION_VERSION_FOR_SCPART           BIGINT  = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_FOR_SCPART)
               ,@LAST_SYNCHRONIZATION_VERSION_FOR_SCSUPERSEDEDPART BIGINT  = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_FOR_SCSUPERSEDEDPART)

        BEGIN TRANSACTION;
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID,@LOGTYPE = 'Information',@NAMEOFSPROC = @ProcName,@LOGMESSAGE = 'Execution Started',@DATAVALUE = NULL;
        IF EXISTS(select 1 FROM CHANGETABLE(CHANGES EMP_STAGING.SCPART, @LAST_SYNCHRONIZATION_VERSION_FOR_SCPART) as ct) AND
           EXISTS(SELECT 1  FROM CHANGETABLE(CHANGES EMP_STAGING.SCSUPERSEDEDPART, @LAST_SYNCHRONIZATION_VERSION_FOR_SCSUPERSEDEDPART) as ct)
        BEGIN

            TRUNCATE TABLE [EMP_STAGING].[SUPERSESSIONCHAINS];

            EXEC [EMP_STAGING].[SupersessionChainEMP_Insert]

        END
        ELSE
        BEGIN
            EXEC sis_stage.WriteLog @PROCESSID = @ProcessID,@LOGTYPE = 'Information',@NAMEOFSPROC = @ProcName,@LOGMESSAGE = 'Load is not required',@DATAVALUE = NULL;
        END
        EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_FOR_SCPART,@CURRENT_VERSION;
        EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_FOR_SCSUPERSEDEDPART,@CURRENT_VERSION;
        COMMIT;
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID,@LOGTYPE = 'Information',@NAMEOFSPROC = @ProcName,@LOGMESSAGE = 'Execution completed',@DATAVALUE = NULL;
    END TRY

    BEGIN CATCH

        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE(),
                @ERRORLINE    INT            = ERROR_LINE()
               ,@ERRORNUM     INT            = ERROR_NUMBER();

        IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s',CAST(@ERRORLINE AS VARCHAR(10)),CAST(@ERRORMESSAGE AS VARCHAR(4000)));
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID,@LOGTYPE = 'Error',@NAMEOFSPROC = @ProcName,@LOGMESSAGE = @LOGMESSAGE,@DATAVALUE = @ERRORNUM;
    END CATCH
END