CREATE PROCEDURE [EMP_STAGING].[LNKPARTSIESNP_Load]
AS
BEGIN
   SET XACT_ABORT, NOCOUNT ON;
    BEGIN TRY

        Declare @ProcName VARCHAR(200) = OBJECT_SCHEMA_NAME(@@PROCID)+'.'+OBJECT_NAME(@@PROCID),
                @ProcessID uniqueidentifier = NewID(),
                @LOGMESSAGE  VARCHAR(MAX);


        DECLARE @FULLTABLENAME_FOR_LNKIEPRODUCTINSTANCE     sysname = 'EMP_STAGING.LNKIEPRODUCTINSTANCE'
               ,@FULLTABLENAME_FOR_EMPPRODUCTINSTANCE       sysname = 'EMP_STAGING.EMPPRODUCTINSTANCE'
               ,@CURRENT_VERSION                            BIGINT  = CHANGE_TRACKING_CURRENT_VERSION();

        DECLARE @LAST_SYNCHRONIZATION_VERSION_FOR_LNKIEPRODUCTINSTANCE  BIGINT  = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_FOR_LNKIEPRODUCTINSTANCE)
               ,@LAST_SYNCHRONIZATION_VERSION_FOR_EMPPRODUCTINSTANCE    BIGINT  = EMP_STAGING._getLastSynchVersion (@FULLTABLENAME_FOR_EMPPRODUCTINSTANCE)

        BEGIN TRANSACTION;
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID, @LOGTYPE = 'Information', @NAMEOFSPROC = @ProcName, @LOGMESSAGE = 'Execution Started', @DATAVALUE = NULL;

        IF EXISTS(select 1 FROM CHANGETABLE(CHANGES EMP_STAGING.LNKIEPRODUCTINSTANCE, @LAST_SYNCHRONIZATION_VERSION_FOR_LNKIEPRODUCTINSTANCE) as ct) AND
           EXISTS(SELECT 1  FROM CHANGETABLE(CHANGES EMP_STAGING.EMPPRODUCTINSTANCE, @LAST_SYNCHRONIZATION_VERSION_FOR_EMPPRODUCTINSTANCE) as ct)
        BEGIN

            --fetching LNKIEPRODUCTINSTANCE_ID for records with Changes
            DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS_LNKIEPRODUCTINSTANCE;
            SELECT * INTO #DIFF_PRIMARY_KEYS_LNKIEPRODUCTINSTANCE
            FROM (
                SELECT CT.LNKIEPRODUCTINSTANCE_ID AS LNKIEPRODUCTINSTANCE_ID
        		FROM CHANGETABLE(CHANGES EMP_STAGING.LNKIEPRODUCTINSTANCE, @LAST_SYNCHRONIZATION_VERSION_FOR_LNKIEPRODUCTINSTANCE) as CT
        		) AS TEMP

            --fetching EMPPRODUCTINSTANCE_ID for records with Changes
            DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS_EMPPRODUCTINSTANCE;
            SELECT * INTO #DIFF_PRIMARY_KEYS_EMPPRODUCTINSTANCE
            FROM (
                SELECT CT.EMPPRODUCTINSTANCE_ID AS EMPPRODUCTINSTANCE_ID
        		FROM CHANGETABLE(CHANGES EMP_STAGING.EMPPRODUCTINSTANCE, @LAST_SYNCHRONIZATION_VERSION_FOR_EMPPRODUCTINSTANCE) as CT
        		) AS TEMP

            --fetching DISTINCT MEDIANUMBER, IESYSTEMCONTROLNUMBER, SNP for records with Changes
            DROP TABLE IF EXISTS #DIFF_PRIMARY_KEYS;
            SELECT * INTO #DIFF_PRIMARY_KEYS
            FROM (
                SELECT DISTINCT L.MEDIANUMBER AS MEDIANUMBER, L.IESYSTEMCONTROLNUMBER AS IESYSTEMCONTROLNUMBER, E.SNP AS SNP
        		FROM EMP_STAGING.LNKIEPRODUCTINSTANCE L
        		INNER JOIN #DIFF_PRIMARY_KEYS_LNKIEPRODUCTINSTANCE D ON D.LNKIEPRODUCTINSTANCE_ID = L.LNKIEPRODUCTINSTANCE_ID
        		INNER JOIN EMP_STAGING.EMPPRODUCTINSTANCE E ON E.EMPPRODUCTINSTANCE_ID = L.EMPPRODUCTINSTANCE_ID

        		UNION

                SELECT DISTINCT L.MEDIANUMBER AS MEDIANUMBER, L.IESYSTEMCONTROLNUMBER AS IESYSTEMCONTROLNUMBER, E.SNP AS SNP
        		FROM EMP_STAGING.EMPPRODUCTINSTANCE E
        		INNER JOIN #DIFF_PRIMARY_KEYS_EMPPRODUCTINSTANCE D ON D.EMPPRODUCTINSTANCE_ID = E.EMPPRODUCTINSTANCE_ID
        		INNER JOIN EMP_STAGING.LNKIEPRODUCTINSTANCE L ON L.EMPPRODUCTINSTANCE_ID = E.EMPPRODUCTINSTANCE_ID
        		) AS TEMP

            -- Delete from EMP_STAGING.LNKPARTSIESNP
		    DELETE FROM EMP_STAGING.LNKPARTSIESNP
		    WHERE EXISTS (
		        SELECT *
		        FROM #DIFF_PRIMARY_KEYS AS DK
		        WHERE DK.MEDIANUMBER = LNKPARTSIESNP.MEDIANUMBER
		            AND DK.IESYSTEMCONTROLNUMBER = LNKPARTSIESNP.IESYSTEMCONTROLNUMBER
		            AND DK.SNP = LNKPARTSIESNP.SNP
			);

            --Reload Changed Data
            EXEC [EMP_STAGING].[LNKPARTSIESNP_Insert]

        END

        ELSE
        BEGIN
            EXEC sis_stage.WriteLog @PROCESSID = @ProcessID, @LOGTYPE = 'Information', @NAMEOFSPROC = @ProcName, @LOGMESSAGE = 'Load is not required', @DATAVALUE = NULL;
        END
        EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_FOR_LNKIEPRODUCTINSTANCE, @CURRENT_VERSION;
        EXEC EMP_STAGING._setLastSynchVersion @FULLTABLENAME_FOR_EMPPRODUCTINSTANCE, @CURRENT_VERSION;
        COMMIT;
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID, @LOGTYPE = 'Information', @NAMEOFSPROC = @ProcName, @LOGMESSAGE = 'Execution completed', @DATAVALUE = NULL;
    END TRY

    BEGIN CATCH

        DECLARE @ERRORMESSAGE NVARCHAR(4000) = ERROR_MESSAGE(),
                @ERRORLINE    INT            = ERROR_LINE()
               ,@ERRORNUM     INT            = ERROR_NUMBER();

        IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		SET @LOGMESSAGE = FORMATMESSAGE('LINE %s: %s', CAST(@ERRORLINE AS VARCHAR(10)), CAST(@ERRORMESSAGE AS VARCHAR(4000)));
        EXEC sis_stage.WriteLog @PROCESSID = @ProcessID, @LOGTYPE = 'Error', @NAMEOFSPROC = @ProcName, @LOGMESSAGE = @LOGMESSAGE, @DATAVALUE = @ERRORNUM;
    END CATCH
END